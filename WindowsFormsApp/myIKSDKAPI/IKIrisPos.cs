//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IKIrisPos : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IKIrisPos(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IKIrisPos obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IKIrisPos obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IKIrisPos() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          dllmainPINVOKE.delete_IKIrisPos(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public class IrisPos : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal IrisPos(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IrisPos obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IrisPos obj) {
      if (obj != null) {
        if (!obj.swigCMemOwn)
          throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
        global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
        obj.swigCMemOwn = false;
        obj.Dispose();
        return ptr;
      } else {
        return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  
    ~IrisPos() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            dllmainPINVOKE.delete_IKIrisPos_IrisPos(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public int xPixel {
      set {
        dllmainPINVOKE.IKIrisPos_IrisPos_xPixel_set(swigCPtr, value);
      } 
      get {
        int ret = dllmainPINVOKE.IKIrisPos_IrisPos_xPixel_get(swigCPtr);
        return ret;
      } 
    }
  
    public int yPixel {
      set {
        dllmainPINVOKE.IKIrisPos_IrisPos_yPixel_set(swigCPtr, value);
      } 
      get {
        int ret = dllmainPINVOKE.IKIrisPos_IrisPos_yPixel_get(swigCPtr);
        return ret;
      } 
    }
  
    public int radius {
      set {
        dllmainPINVOKE.IKIrisPos_IrisPos_radius_set(swigCPtr, value);
      } 
      get {
        int ret = dllmainPINVOKE.IKIrisPos_IrisPos_radius_get(swigCPtr);
        return ret;
      } 
    }
  
    public IrisPos() : this(dllmainPINVOKE.new_IKIrisPos_IrisPos(), true) {
    }
  
  }

  public IKIrisPos.IrisPos leftIrisPos {
    set {
      dllmainPINVOKE.IKIrisPos_leftIrisPos_set(swigCPtr, IKIrisPos.IrisPos.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = dllmainPINVOKE.IKIrisPos_leftIrisPos_get(swigCPtr);
      IKIrisPos.IrisPos ret = (cPtr == global::System.IntPtr.Zero) ? null : new IKIrisPos.IrisPos(cPtr, false);
      return ret;
    } 
  }

  public IKIrisPos.IrisPos rightIrisPos {
    set {
      dllmainPINVOKE.IKIrisPos_rightIrisPos_set(swigCPtr, IKIrisPos.IrisPos.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = dllmainPINVOKE.IKIrisPos_rightIrisPos_get(swigCPtr);
      IKIrisPos.IrisPos ret = (cPtr == global::System.IntPtr.Zero) ? null : new IKIrisPos.IrisPos(cPtr, false);
      return ret;
    } 
  }

  public int dist {
    set {
      dllmainPINVOKE.IKIrisPos_dist_set(swigCPtr, value);
    } 
    get {
      int ret = dllmainPINVOKE.IKIrisPos_dist_get(swigCPtr);
      return ret;
    } 
  }

  public IKIrisPos() : this(dllmainPINVOKE.new_IKIrisPos(), true) {
  }

}
