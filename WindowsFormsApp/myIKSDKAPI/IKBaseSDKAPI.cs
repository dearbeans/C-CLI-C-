//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IKBaseSDKAPI : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IKBaseSDKAPI(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IKBaseSDKAPI obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IKBaseSDKAPI obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IKBaseSDKAPI() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          dllmainPINVOKE.delete_IKBaseSDKAPI(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual int Init(IKBaseProcessorCallback callback, IKInitMode initDeviceMode) {
    int ret = dllmainPINVOKE.IKBaseSDKAPI_Init(swigCPtr, IKBaseProcessorCallback.getCPtr(callback), (int)initDeviceMode);
    return ret;
  }

  public virtual int Config(IKConfigInfo config) {
    int ret = dllmainPINVOKE.IKBaseSDKAPI_Config(swigCPtr, IKConfigInfo.getCPtr(config));
    if (dllmainPINVOKE.SWIGPendingException.Pending) throw dllmainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int StartEnroll() {
    int ret = dllmainPINVOKE.IKBaseSDKAPI_StartEnroll(swigCPtr);
    return ret;
  }

  public virtual int StopEnroll() {
    int ret = dllmainPINVOKE.IKBaseSDKAPI_StopEnroll(swigCPtr);
    return ret;
  }

  public virtual int StartIdent(SWIGTYPE_p_unsigned_char pCodeListL, int codeNumL, SWIGTYPE_p_unsigned_char pCodeListR, int codeNumR, SWIGTYPE_p_unsigned_char pCodeListF, int codeNumF) {
    int ret = dllmainPINVOKE.IKBaseSDKAPI_StartIdent(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(pCodeListL), codeNumL, SWIGTYPE_p_unsigned_char.getCPtr(pCodeListR), codeNumR, SWIGTYPE_p_unsigned_char.getCPtr(pCodeListF), codeNumF);
    return ret;
  }

  public virtual int StopIdent() {
    int ret = dllmainPINVOKE.IKBaseSDKAPI_StopIdent(swigCPtr);
    return ret;
  }

  public virtual int Reset() {
    int ret = dllmainPINVOKE.IKBaseSDKAPI_Reset(swigCPtr);
    return ret;
  }

  public virtual int MatchFeature(SWIGTYPE_p_unsigned_char code, SWIGTYPE_p_unsigned_char pCodeList, int codeNum, IKMatchOutput pMatchOutput, IKMatchMode matchMode) {
    int ret = dllmainPINVOKE.IKBaseSDKAPI_MatchFeature(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(code), SWIGTYPE_p_unsigned_char.getCPtr(pCodeList), codeNum, IKMatchOutput.getCPtr(pMatchOutput), (int)matchMode);
    return ret;
  }

  public virtual int Release() {
    int ret = dllmainPINVOKE.IKBaseSDKAPI_Release(swigCPtr);
    return ret;
  }

  public virtual void GetVersion(string version) {
    dllmainPINVOKE.IKBaseSDKAPI_GetVersion(swigCPtr, version);
  }

  public virtual int WriteParameter(IKCOMPONENTTYPE type, IKCOMPONENTSTATUS status, int value, IKLIGHTMODE mode) {
    int ret = dllmainPINVOKE.IKBaseSDKAPI_WriteParameter__SWIG_0(swigCPtr, (int)type, (int)status, value, (int)mode);
    return ret;
  }

  public virtual int WriteParameter(IKCOMPONENTTYPE type, IKCOMPONENTSTATUS status, int value) {
    int ret = dllmainPINVOKE.IKBaseSDKAPI_WriteParameter__SWIG_1(swigCPtr, (int)type, (int)status, value);
    return ret;
  }

  public virtual int WriteParameter(IKCOMPONENTTYPE type, IKCOMPONENTSTATUS status) {
    int ret = dllmainPINVOKE.IKBaseSDKAPI_WriteParameter__SWIG_2(swigCPtr, (int)type, (int)status);
    return ret;
  }

}
