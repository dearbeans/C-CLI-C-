/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGCSHARP
#define SWIG_DIRECTORS

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_dllmain(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_dllmain(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_dllmain(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include "IKBaseFaceAPIStruct.h"
#include "IKBaseIrisAPIStruct.h"
#include "IKBaseSDKAPIStruct.h"
#include "IKFrame.h"
#include "dllmain.h"
#include "IKBaseSDKAPI.h"


#include <string.h>



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "dllmain_wrap.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKBaseSDKAPI(void * jarg1) {
  IKBaseSDKAPI *arg1 = (IKBaseSDKAPI *) 0 ;
  
  arg1 = (IKBaseSDKAPI *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKBaseSDKAPI_Init(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  IKBaseSDKAPI *arg1 = (IKBaseSDKAPI *) 0 ;
  IKBaseProcessorCallback *arg2 = (IKBaseProcessorCallback *) 0 ;
  IKInitMode arg3 ;
  int result;
  
  arg1 = (IKBaseSDKAPI *)jarg1; 
  arg2 = (IKBaseProcessorCallback *)jarg2; 
  arg3 = (IKInitMode)jarg3; 
  result = (int)(arg1)->Init(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKBaseSDKAPI_Config(void * jarg1, void * jarg2) {
  int jresult ;
  IKBaseSDKAPI *arg1 = (IKBaseSDKAPI *) 0 ;
  IKConfigInfo arg2 ;
  IKConfigInfo *argp2 ;
  int result;
  
  arg1 = (IKBaseSDKAPI *)jarg1; 
  argp2 = (IKConfigInfo *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null IKConfigInfo", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->Config(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKBaseSDKAPI_StartEnroll(void * jarg1) {
  int jresult ;
  IKBaseSDKAPI *arg1 = (IKBaseSDKAPI *) 0 ;
  int result;
  
  arg1 = (IKBaseSDKAPI *)jarg1; 
  result = (int)(arg1)->StartEnroll();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKBaseSDKAPI_StopEnroll(void * jarg1) {
  int jresult ;
  IKBaseSDKAPI *arg1 = (IKBaseSDKAPI *) 0 ;
  int result;
  
  arg1 = (IKBaseSDKAPI *)jarg1; 
  result = (int)(arg1)->StopEnroll();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKBaseSDKAPI_StartIdent(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, void * jarg6, int jarg7) {
  int jresult ;
  IKBaseSDKAPI *arg1 = (IKBaseSDKAPI *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  int arg5 ;
  unsigned char *arg6 = (unsigned char *) 0 ;
  int arg7 ;
  int result;
  
  arg1 = (IKBaseSDKAPI *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (unsigned char *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (unsigned char *)jarg6; 
  arg7 = (int)jarg7; 
  result = (int)(arg1)->StartIdent(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKBaseSDKAPI_StopIdent(void * jarg1) {
  int jresult ;
  IKBaseSDKAPI *arg1 = (IKBaseSDKAPI *) 0 ;
  int result;
  
  arg1 = (IKBaseSDKAPI *)jarg1; 
  result = (int)(arg1)->StopIdent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKBaseSDKAPI_Reset(void * jarg1) {
  int jresult ;
  IKBaseSDKAPI *arg1 = (IKBaseSDKAPI *) 0 ;
  int result;
  
  arg1 = (IKBaseSDKAPI *)jarg1; 
  result = (int)(arg1)->Reset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKBaseSDKAPI_MatchFeature(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5, int jarg6) {
  int jresult ;
  IKBaseSDKAPI *arg1 = (IKBaseSDKAPI *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  int arg4 ;
  IKMatchOutput *arg5 = (IKMatchOutput *) 0 ;
  IKMatchMode arg6 ;
  int result;
  
  arg1 = (IKBaseSDKAPI *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (IKMatchOutput *)jarg5; 
  arg6 = (IKMatchMode)jarg6; 
  result = (int)(arg1)->MatchFeature(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKBaseSDKAPI_Release(void * jarg1) {
  int jresult ;
  IKBaseSDKAPI *arg1 = (IKBaseSDKAPI *) 0 ;
  int result;
  
  arg1 = (IKBaseSDKAPI *)jarg1; 
  result = (int)(arg1)->Release();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKBaseSDKAPI_GetVersion(void * jarg1, char * jarg2) {
  IKBaseSDKAPI *arg1 = (IKBaseSDKAPI *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (IKBaseSDKAPI *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->GetVersion(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKBaseSDKAPI_WriteParameter__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  int jresult ;
  IKBaseSDKAPI *arg1 = (IKBaseSDKAPI *) 0 ;
  IKCOMPONENTTYPE arg2 ;
  IKCOMPONENTSTATUS arg3 ;
  int arg4 ;
  IKLIGHTMODE arg5 ;
  int result;
  
  arg1 = (IKBaseSDKAPI *)jarg1; 
  arg2 = (IKCOMPONENTTYPE)jarg2; 
  arg3 = (IKCOMPONENTSTATUS)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (IKLIGHTMODE)jarg5; 
  result = (int)(arg1)->WriteParameter(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKBaseSDKAPI_WriteParameter__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4) {
  int jresult ;
  IKBaseSDKAPI *arg1 = (IKBaseSDKAPI *) 0 ;
  IKCOMPONENTTYPE arg2 ;
  IKCOMPONENTSTATUS arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (IKBaseSDKAPI *)jarg1; 
  arg2 = (IKCOMPONENTTYPE)jarg2; 
  arg3 = (IKCOMPONENTSTATUS)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->WriteParameter(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKBaseSDKAPI_WriteParameter__SWIG_2(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  IKBaseSDKAPI *arg1 = (IKBaseSDKAPI *) 0 ;
  IKCOMPONENTTYPE arg2 ;
  IKCOMPONENTSTATUS arg3 ;
  int result;
  
  arg1 = (IKBaseSDKAPI *)jarg1; 
  arg2 = (IKCOMPONENTTYPE)jarg2; 
  arg3 = (IKCOMPONENTSTATUS)jarg3; 
  result = (int)(arg1)->WriteParameter(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Fun_Success_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Fun_Success;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_BASE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_BASE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_ENR_IDEN_INTERRUPT_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_ENR_IDEN_INTERRUPT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_Invalid_ENRNUM_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_Invalid_ENRNUM;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_Invalid_OVERTIME_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_Invalid_OVERTIME;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_Invalid_DELETEAREA_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_Invalid_DELETEAREA;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_Invalid_ENRIDENTDISTANCE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_Invalid_ENRIDENTDISTANCE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_Invalid_PosMoveCheck_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_Invalid_PosMoveCheck;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_Default_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_Default;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_BadInput_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_BadInput;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_Match_Failed_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_Match_Failed;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_EnrollPersonChange_CLEAR_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_EnrollPersonChange_CLEAR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_QUEUE_FULL_CLEAR_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_QUEUE_FULL_CLEAR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_ENROLLEND_CLEAR_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_ENROLLEND_CLEAR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_CLEARCACHE_FAILED_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_CLEARCACHE_FAILED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_ASYNCTASK_BUSY_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_ASYNCTASK_BUSY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_STOP_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_STOP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_TimeOut_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_TimeOut;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_EnrIden_Failed_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_EnrIden_Failed;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_Init_Fail_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_Init_Fail;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_Detect_Init_Fail_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_Detect_Init_Fail;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_Detect_Invalid_License_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_Detect_Invalid_License;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_Invalid_TpLen_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_Invalid_TpLen;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_Feature_Init_Fail_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_Feature_Init_Fail;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_Feature_Repeat_Fail_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_Feature_Repeat_Fail;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_Feature_Invalid_License_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_Feature_Invalid_License;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_NoMatch_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_NoMatch;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_RESETBUSY_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_RESETBUSY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_RESET_CLEAR_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_RESET_CLEAR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_RESET_FAILED_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_RESET_FAILED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_SETCONFIGFILEPATH_FAILED_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_SETCONFIGFILEPATH_FAILED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_Data_Interrupted_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_Data_Interrupted;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_CallSelect_Failed_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_CallSelect_Failed;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Err_LiveInit_Failed_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Err_LiveInit_Failed;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFaceMaxEnrNum_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFaceMaxEnrNum;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Ori_ImH_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Ori_ImH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Ori_ImW_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Ori_ImW;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_Ori_ImD_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_Ori_ImD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFace_MAX_IM_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFace_MAX_IM_SIZE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKDepth_Ori_ImH_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKDepth_Ori_ImH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKDepth_Ori_ImW_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKDepth_Ori_ImW;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKDepth_Ori_ImD_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKDepth_Ori_ImD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKDepth_MAX_IM_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKDepth_MAX_IM_SIZE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFACE_FEATURE_LENGTH_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKFACE_FEATURE_LENGTH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceQulityInfo_yaw_set(void * jarg1, float jarg2) {
  IKFaceQulityInfo *arg1 = (IKFaceQulityInfo *) 0 ;
  float arg2 ;
  
  arg1 = (IKFaceQulityInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yaw = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IKFaceQulityInfo_yaw_get(void * jarg1) {
  float jresult ;
  IKFaceQulityInfo *arg1 = (IKFaceQulityInfo *) 0 ;
  float result;
  
  arg1 = (IKFaceQulityInfo *)jarg1; 
  result = (float) ((arg1)->yaw);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceQulityInfo_pitch_set(void * jarg1, float jarg2) {
  IKFaceQulityInfo *arg1 = (IKFaceQulityInfo *) 0 ;
  float arg2 ;
  
  arg1 = (IKFaceQulityInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->pitch = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IKFaceQulityInfo_pitch_get(void * jarg1) {
  float jresult ;
  IKFaceQulityInfo *arg1 = (IKFaceQulityInfo *) 0 ;
  float result;
  
  arg1 = (IKFaceQulityInfo *)jarg1; 
  result = (float) ((arg1)->pitch);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceQulityInfo_roll_set(void * jarg1, float jarg2) {
  IKFaceQulityInfo *arg1 = (IKFaceQulityInfo *) 0 ;
  float arg2 ;
  
  arg1 = (IKFaceQulityInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->roll = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IKFaceQulityInfo_roll_get(void * jarg1) {
  float jresult ;
  IKFaceQulityInfo *arg1 = (IKFaceQulityInfo *) 0 ;
  float result;
  
  arg1 = (IKFaceQulityInfo *)jarg1; 
  result = (float) ((arg1)->roll);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceQulityInfo_confidence_set(void * jarg1, float jarg2) {
  IKFaceQulityInfo *arg1 = (IKFaceQulityInfo *) 0 ;
  float arg2 ;
  
  arg1 = (IKFaceQulityInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->confidence = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IKFaceQulityInfo_confidence_get(void * jarg1) {
  float jresult ;
  IKFaceQulityInfo *arg1 = (IKFaceQulityInfo *) 0 ;
  float result;
  
  arg1 = (IKFaceQulityInfo *)jarg1; 
  result = (float) ((arg1)->confidence);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IKFaceQulityInfo() {
  void * jresult ;
  IKFaceQulityInfo *result = 0 ;
  
  result = (IKFaceQulityInfo *)new IKFaceQulityInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKFaceQulityInfo(void * jarg1) {
  IKFaceQulityInfo *arg1 = (IKFaceQulityInfo *) 0 ;
  
  arg1 = (IKFaceQulityInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SELFRECT_left_set(void * jarg1, long jarg2) {
  SELFRECT *arg1 = (SELFRECT *) 0 ;
  long arg2 ;
  
  arg1 = (SELFRECT *)jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->left = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_SELFRECT_left_get(void * jarg1) {
  long jresult ;
  SELFRECT *arg1 = (SELFRECT *) 0 ;
  long result;
  
  arg1 = (SELFRECT *)jarg1; 
  result = (long) ((arg1)->left);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SELFRECT_top_set(void * jarg1, long jarg2) {
  SELFRECT *arg1 = (SELFRECT *) 0 ;
  long arg2 ;
  
  arg1 = (SELFRECT *)jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->top = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_SELFRECT_top_get(void * jarg1) {
  long jresult ;
  SELFRECT *arg1 = (SELFRECT *) 0 ;
  long result;
  
  arg1 = (SELFRECT *)jarg1; 
  result = (long) ((arg1)->top);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SELFRECT_right_set(void * jarg1, long jarg2) {
  SELFRECT *arg1 = (SELFRECT *) 0 ;
  long arg2 ;
  
  arg1 = (SELFRECT *)jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->right = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_SELFRECT_right_get(void * jarg1) {
  long jresult ;
  SELFRECT *arg1 = (SELFRECT *) 0 ;
  long result;
  
  arg1 = (SELFRECT *)jarg1; 
  result = (long) ((arg1)->right);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SELFRECT_bottom_set(void * jarg1, long jarg2) {
  SELFRECT *arg1 = (SELFRECT *) 0 ;
  long arg2 ;
  
  arg1 = (SELFRECT *)jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->bottom = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_SELFRECT_bottom_get(void * jarg1) {
  long jresult ;
  SELFRECT *arg1 = (SELFRECT *) 0 ;
  long result;
  
  arg1 = (SELFRECT *)jarg1; 
  result = (long) ((arg1)->bottom);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SELFRECT() {
  void * jresult ;
  SELFRECT *result = 0 ;
  
  result = (SELFRECT *)new SELFRECT();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SELFRECT(void * jarg1) {
  SELFRECT *arg1 = (SELFRECT *) 0 ;
  
  arg1 = (SELFRECT *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SELFPOINT_x_set(void * jarg1, long jarg2) {
  SELFPOINT *arg1 = (SELFPOINT *) 0 ;
  long arg2 ;
  
  arg1 = (SELFPOINT *)jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_SELFPOINT_x_get(void * jarg1) {
  long jresult ;
  SELFPOINT *arg1 = (SELFPOINT *) 0 ;
  long result;
  
  arg1 = (SELFPOINT *)jarg1; 
  result = (long) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SELFPOINT_y_set(void * jarg1, long jarg2) {
  SELFPOINT *arg1 = (SELFPOINT *) 0 ;
  long arg2 ;
  
  arg1 = (SELFPOINT *)jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_SELFPOINT_y_get(void * jarg1) {
  long jresult ;
  SELFPOINT *arg1 = (SELFPOINT *) 0 ;
  long result;
  
  arg1 = (SELFPOINT *)jarg1; 
  result = (long) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SELFPOINT() {
  void * jresult ;
  SELFPOINT *result = 0 ;
  
  result = (SELFPOINT *)new SELFPOINT();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SELFPOINT(void * jarg1) {
  SELFPOINT *arg1 = (SELFPOINT *) 0 ;
  
  arg1 = (SELFPOINT *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceROIInfo_ifValid_set(void * jarg1, unsigned int jarg2) {
  IKFaceROIInfo *arg1 = (IKFaceROIInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (IKFaceROIInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ifValid = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IKFaceROIInfo_ifValid_get(void * jarg1) {
  unsigned int jresult ;
  IKFaceROIInfo *arg1 = (IKFaceROIInfo *) 0 ;
  bool result;
  
  arg1 = (IKFaceROIInfo *)jarg1; 
  result = (bool) ((arg1)->ifValid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceROIInfo_rcFace_set(void * jarg1, void * jarg2) {
  IKFaceROIInfo *arg1 = (IKFaceROIInfo *) 0 ;
  SELFRECT *arg2 = (SELFRECT *) 0 ;
  
  arg1 = (IKFaceROIInfo *)jarg1; 
  arg2 = (SELFRECT *)jarg2; 
  if (arg1) (arg1)->rcFace = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKFaceROIInfo_rcFace_get(void * jarg1) {
  void * jresult ;
  IKFaceROIInfo *arg1 = (IKFaceROIInfo *) 0 ;
  SELFRECT *result = 0 ;
  
  arg1 = (IKFaceROIInfo *)jarg1; 
  result = (SELFRECT *)& ((arg1)->rcFace);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceROIInfo_ptLeftEye_set(void * jarg1, void * jarg2) {
  IKFaceROIInfo *arg1 = (IKFaceROIInfo *) 0 ;
  SELFPOINT *arg2 = (SELFPOINT *) 0 ;
  
  arg1 = (IKFaceROIInfo *)jarg1; 
  arg2 = (SELFPOINT *)jarg2; 
  if (arg1) (arg1)->ptLeftEye = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKFaceROIInfo_ptLeftEye_get(void * jarg1) {
  void * jresult ;
  IKFaceROIInfo *arg1 = (IKFaceROIInfo *) 0 ;
  SELFPOINT *result = 0 ;
  
  arg1 = (IKFaceROIInfo *)jarg1; 
  result = (SELFPOINT *)& ((arg1)->ptLeftEye);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceROIInfo_ptRightEye_set(void * jarg1, void * jarg2) {
  IKFaceROIInfo *arg1 = (IKFaceROIInfo *) 0 ;
  SELFPOINT *arg2 = (SELFPOINT *) 0 ;
  
  arg1 = (IKFaceROIInfo *)jarg1; 
  arg2 = (SELFPOINT *)jarg2; 
  if (arg1) (arg1)->ptRightEye = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKFaceROIInfo_ptRightEye_get(void * jarg1) {
  void * jresult ;
  IKFaceROIInfo *arg1 = (IKFaceROIInfo *) 0 ;
  SELFPOINT *result = 0 ;
  
  arg1 = (IKFaceROIInfo *)jarg1; 
  result = (SELFPOINT *)& ((arg1)->ptRightEye);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceROIInfo_ptMouthLeft_set(void * jarg1, void * jarg2) {
  IKFaceROIInfo *arg1 = (IKFaceROIInfo *) 0 ;
  SELFPOINT *arg2 = (SELFPOINT *) 0 ;
  
  arg1 = (IKFaceROIInfo *)jarg1; 
  arg2 = (SELFPOINT *)jarg2; 
  if (arg1) (arg1)->ptMouthLeft = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKFaceROIInfo_ptMouthLeft_get(void * jarg1) {
  void * jresult ;
  IKFaceROIInfo *arg1 = (IKFaceROIInfo *) 0 ;
  SELFPOINT *result = 0 ;
  
  arg1 = (IKFaceROIInfo *)jarg1; 
  result = (SELFPOINT *)& ((arg1)->ptMouthLeft);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceROIInfo_ptMouthRight_set(void * jarg1, void * jarg2) {
  IKFaceROIInfo *arg1 = (IKFaceROIInfo *) 0 ;
  SELFPOINT *arg2 = (SELFPOINT *) 0 ;
  
  arg1 = (IKFaceROIInfo *)jarg1; 
  arg2 = (SELFPOINT *)jarg2; 
  if (arg1) (arg1)->ptMouthRight = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKFaceROIInfo_ptMouthRight_get(void * jarg1) {
  void * jresult ;
  IKFaceROIInfo *arg1 = (IKFaceROIInfo *) 0 ;
  SELFPOINT *result = 0 ;
  
  arg1 = (IKFaceROIInfo *)jarg1; 
  result = (SELFPOINT *)& ((arg1)->ptMouthRight);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceROIInfo_ptNose_set(void * jarg1, void * jarg2) {
  IKFaceROIInfo *arg1 = (IKFaceROIInfo *) 0 ;
  SELFPOINT *arg2 = (SELFPOINT *) 0 ;
  
  arg1 = (IKFaceROIInfo *)jarg1; 
  arg2 = (SELFPOINT *)jarg2; 
  if (arg1) (arg1)->ptNose = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKFaceROIInfo_ptNose_get(void * jarg1) {
  void * jresult ;
  IKFaceROIInfo *arg1 = (IKFaceROIInfo *) 0 ;
  SELFPOINT *result = 0 ;
  
  arg1 = (IKFaceROIInfo *)jarg1; 
  result = (SELFPOINT *)& ((arg1)->ptNose);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceROIInfo_fAngle_set(void * jarg1, void * jarg2) {
  IKFaceROIInfo *arg1 = (IKFaceROIInfo *) 0 ;
  IKFaceQulityInfo *arg2 = (IKFaceQulityInfo *) 0 ;
  
  arg1 = (IKFaceROIInfo *)jarg1; 
  arg2 = (IKFaceQulityInfo *)jarg2; 
  if (arg1) (arg1)->fAngle = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKFaceROIInfo_fAngle_get(void * jarg1) {
  void * jresult ;
  IKFaceROIInfo *arg1 = (IKFaceROIInfo *) 0 ;
  IKFaceQulityInfo *result = 0 ;
  
  arg1 = (IKFaceROIInfo *)jarg1; 
  result = (IKFaceQulityInfo *)& ((arg1)->fAngle);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IKFaceROIInfo() {
  void * jresult ;
  IKFaceROIInfo *result = 0 ;
  
  result = (IKFaceROIInfo *)new IKFaceROIInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKFaceROIInfo(void * jarg1) {
  IKFaceROIInfo *arg1 = (IKFaceROIInfo *) 0 ;
  
  arg1 = (IKFaceROIInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessedResult_creat(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9) {
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  (arg1)->creat(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessedResult_init(void * jarg1) {
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  (arg1)->init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessedResult_distroy(void * jarg1) {
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  (arg1)->distroy();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessedResult_m_rcFace_set(void * jarg1, void * jarg2) {
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  SELFRECT *arg2 = (SELFRECT *) 0 ;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  arg2 = (SELFRECT *)jarg2; 
  if (arg1) (arg1)->m_rcFace = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKFaceProcessedResult_m_rcFace_get(void * jarg1) {
  void * jresult ;
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  SELFRECT *result = 0 ;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  result = (SELFRECT *)& ((arg1)->m_rcFace);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessedResult_m_faceQuality_set(void * jarg1, void * jarg2) {
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  IKFaceQulityInfo *arg2 = (IKFaceQulityInfo *) 0 ;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  arg2 = (IKFaceQulityInfo *)jarg2; 
  if (arg1) (arg1)->m_faceQuality = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKFaceProcessedResult_m_faceQuality_get(void * jarg1) {
  void * jresult ;
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  IKFaceQulityInfo *result = 0 ;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  result = (IKFaceQulityInfo *)& ((arg1)->m_faceQuality);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessedResult_m_detectImageData_set(void * jarg1, void * jarg2) {
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  if (arg1) (arg1)->m_detectImageData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKFaceProcessedResult_m_detectImageData_get(void * jarg1) {
  void * jresult ;
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  result = (unsigned char *) ((arg1)->m_detectImageData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessedResult_m_detectImageSize_set(void * jarg1, int jarg2) {
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  int arg2 ;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_detectImageSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFaceProcessedResult_m_detectImageSize_get(void * jarg1) {
  int jresult ;
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  int result;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  result = (int) ((arg1)->m_detectImageSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessedResult_m_detectImageH_set(void * jarg1, int jarg2) {
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  int arg2 ;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_detectImageH = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFaceProcessedResult_m_detectImageH_get(void * jarg1) {
  int jresult ;
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  int result;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  result = (int) ((arg1)->m_detectImageH);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessedResult_m_detectImageW_set(void * jarg1, int jarg2) {
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  int arg2 ;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_detectImageW = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFaceProcessedResult_m_detectImageW_get(void * jarg1) {
  int jresult ;
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  int result;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  result = (int) ((arg1)->m_detectImageW);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessedResult_m_imageData_set(void * jarg1, void * jarg2) {
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  if (arg1) (arg1)->m_imageData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKFaceProcessedResult_m_imageData_get(void * jarg1) {
  void * jresult ;
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  result = (unsigned char *) ((arg1)->m_imageData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessedResult_m_imageSize_set(void * jarg1, int jarg2) {
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  int arg2 ;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_imageSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFaceProcessedResult_m_imageSize_get(void * jarg1) {
  int jresult ;
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  int result;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  result = (int) ((arg1)->m_imageSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessedResult_m_imageH_set(void * jarg1, int jarg2) {
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  int arg2 ;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_imageH = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFaceProcessedResult_m_imageH_get(void * jarg1) {
  int jresult ;
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  int result;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  result = (int) ((arg1)->m_imageH);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessedResult_m_imageW_set(void * jarg1, int jarg2) {
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  int arg2 ;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_imageW = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFaceProcessedResult_m_imageW_get(void * jarg1) {
  int jresult ;
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  int result;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  result = (int) ((arg1)->m_imageW);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessedResult_m_enrTemplate_set(void * jarg1, void * jarg2) {
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  if (arg1) (arg1)->m_enrTemplate = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKFaceProcessedResult_m_enrTemplate_get(void * jarg1) {
  void * jresult ;
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  result = (unsigned char *) ((arg1)->m_enrTemplate);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessedResult_m_enrTemplateSize_set(void * jarg1, int jarg2) {
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  int arg2 ;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_enrTemplateSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFaceProcessedResult_m_enrTemplateSize_get(void * jarg1) {
  int jresult ;
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  int result;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  result = (int) ((arg1)->m_enrTemplateSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessedResult_m_recTemplate_set(void * jarg1, void * jarg2) {
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  if (arg1) (arg1)->m_recTemplate = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKFaceProcessedResult_m_recTemplate_get(void * jarg1) {
  void * jresult ;
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  result = (unsigned char *) ((arg1)->m_recTemplate);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessedResult_m_recTemplateSize_set(void * jarg1, int jarg2) {
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  int arg2 ;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_recTemplateSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFaceProcessedResult_m_recTemplateSize_get(void * jarg1) {
  int jresult ;
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  int result;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  result = (int) ((arg1)->m_recTemplateSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IKFaceProcessedResult() {
  void * jresult ;
  tagIKFaceProcessedResult *result = 0 ;
  
  result = (tagIKFaceProcessedResult *)new tagIKFaceProcessedResult();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKFaceProcessedResult(void * jarg1) {
  tagIKFaceProcessedResult *arg1 = (tagIKFaceProcessedResult *) 0 ;
  
  arg1 = (tagIKFaceProcessedResult *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceMatchOutput_matchScore_set(void * jarg1, int jarg2) {
  IKFaceMatchOutputStruct *arg1 = (IKFaceMatchOutputStruct *) 0 ;
  int arg2 ;
  
  arg1 = (IKFaceMatchOutputStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->matchScore = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFaceMatchOutput_matchScore_get(void * jarg1) {
  int jresult ;
  IKFaceMatchOutputStruct *arg1 = (IKFaceMatchOutputStruct *) 0 ;
  int result;
  
  arg1 = (IKFaceMatchOutputStruct *)jarg1; 
  result = (int) ((arg1)->matchScore);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceMatchOutput_matchIndex_set(void * jarg1, int jarg2) {
  IKFaceMatchOutputStruct *arg1 = (IKFaceMatchOutputStruct *) 0 ;
  int arg2 ;
  
  arg1 = (IKFaceMatchOutputStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->matchIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFaceMatchOutput_matchIndex_get(void * jarg1) {
  int jresult ;
  IKFaceMatchOutputStruct *arg1 = (IKFaceMatchOutputStruct *) 0 ;
  int result;
  
  arg1 = (IKFaceMatchOutputStruct *)jarg1; 
  result = (int) ((arg1)->matchIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IKFaceMatchOutput() {
  void * jresult ;
  IKFaceMatchOutputStruct *result = 0 ;
  
  result = (IKFaceMatchOutputStruct *)new IKFaceMatchOutputStruct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKFaceMatchOutput(void * jarg1) {
  IKFaceMatchOutputStruct *arg1 = (IKFaceMatchOutputStruct *) 0 ;
  
  arg1 = (IKFaceMatchOutputStruct *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceIdentOutputStruct_identResult_set(void * jarg1, int jarg2) {
  tagIKFaceIdentOutputStruct *arg1 = (tagIKFaceIdentOutputStruct *) 0 ;
  int arg2 ;
  
  arg1 = (tagIKFaceIdentOutputStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->identResult = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFaceIdentOutputStruct_identResult_get(void * jarg1) {
  int jresult ;
  tagIKFaceIdentOutputStruct *arg1 = (tagIKFaceIdentOutputStruct *) 0 ;
  int result;
  
  arg1 = (tagIKFaceIdentOutputStruct *)jarg1; 
  result = (int) ((arg1)->identResult);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceIdentOutputStruct_matchResult_set(void * jarg1, void * jarg2) {
  tagIKFaceIdentOutputStruct *arg1 = (tagIKFaceIdentOutputStruct *) 0 ;
  IKFaceMatchOutput *arg2 = (IKFaceMatchOutput *) 0 ;
  
  arg1 = (tagIKFaceIdentOutputStruct *)jarg1; 
  arg2 = (IKFaceMatchOutput *)jarg2; 
  if (arg1) (arg1)->matchResult = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKFaceIdentOutputStruct_matchResult_get(void * jarg1) {
  void * jresult ;
  tagIKFaceIdentOutputStruct *arg1 = (tagIKFaceIdentOutputStruct *) 0 ;
  IKFaceMatchOutput *result = 0 ;
  
  arg1 = (tagIKFaceIdentOutputStruct *)jarg1; 
  result = (IKFaceMatchOutput *)& ((arg1)->matchResult);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceIdentOutputStruct_resultInfo_set(void * jarg1, void * jarg2) {
  tagIKFaceIdentOutputStruct *arg1 = (tagIKFaceIdentOutputStruct *) 0 ;
  IKFaceProcessedResult *arg2 = (IKFaceProcessedResult *) 0 ;
  
  arg1 = (tagIKFaceIdentOutputStruct *)jarg1; 
  arg2 = (IKFaceProcessedResult *)jarg2; 
  if (arg1) (arg1)->resultInfo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKFaceIdentOutputStruct_resultInfo_get(void * jarg1) {
  void * jresult ;
  tagIKFaceIdentOutputStruct *arg1 = (tagIKFaceIdentOutputStruct *) 0 ;
  IKFaceProcessedResult *result = 0 ;
  
  arg1 = (tagIKFaceIdentOutputStruct *)jarg1; 
  result = (IKFaceProcessedResult *) ((arg1)->resultInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IKFaceIdentOutputStruct() {
  void * jresult ;
  tagIKFaceIdentOutputStruct *result = 0 ;
  
  result = (tagIKFaceIdentOutputStruct *)new tagIKFaceIdentOutputStruct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKFaceIdentOutputStruct(void * jarg1) {
  tagIKFaceIdentOutputStruct *arg1 = (tagIKFaceIdentOutputStruct *) 0 ;
  
  arg1 = (tagIKFaceIdentOutputStruct *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessorState_Init(void * jarg1) {
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  (arg1)->Init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessorState_workMode_set(void * jarg1, int jarg2) {
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  IKFaceWorkMode arg2 ;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  arg2 = (IKFaceWorkMode)jarg2; 
  if (arg1) (arg1)->workMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFaceProcessorState_workMode_get(void * jarg1) {
  int jresult ;
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  IKFaceWorkMode result;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  result = (IKFaceWorkMode) ((arg1)->workMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessorState_faceROIInfo_set(void * jarg1, void * jarg2) {
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  IKFaceROIInfo *arg2 = (IKFaceROIInfo *) 0 ;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  arg2 = (IKFaceROIInfo *)jarg2; 
  if (arg1) (arg1)->faceROIInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKFaceProcessorState_faceROIInfo_get(void * jarg1) {
  void * jresult ;
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  IKFaceROIInfo *result = 0 ;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  result = (IKFaceROIInfo *)& ((arg1)->faceROIInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessorState_dist_set(void * jarg1, int jarg2) {
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  int arg2 ;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->dist = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFaceProcessorState_dist_get(void * jarg1) {
  int jresult ;
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  int result;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  result = (int) ((arg1)->dist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessorState_lightScore_set(void * jarg1, float jarg2) {
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  float arg2 ;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->lightScore = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IKFaceProcessorState_lightScore_get(void * jarg1) {
  float jresult ;
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  float result;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  result = (float) ((arg1)->lightScore);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessorState_imageW_set(void * jarg1, int jarg2) {
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  int arg2 ;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->imageW = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFaceProcessorState_imageW_get(void * jarg1) {
  int jresult ;
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  int result;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  result = (int) ((arg1)->imageW);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessorState_imageH_set(void * jarg1, int jarg2) {
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  int arg2 ;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->imageH = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFaceProcessorState_imageH_get(void * jarg1) {
  int jresult ;
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  int result;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  result = (int) ((arg1)->imageH);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessorState_detectBeginX_set(void * jarg1, int jarg2) {
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  int arg2 ;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->detectBeginX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFaceProcessorState_detectBeginX_get(void * jarg1) {
  int jresult ;
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  int result;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  result = (int) ((arg1)->detectBeginX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessorState_detectBeginY_set(void * jarg1, int jarg2) {
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  int arg2 ;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->detectBeginY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFaceProcessorState_detectBeginY_get(void * jarg1) {
  int jresult ;
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  int result;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  result = (int) ((arg1)->detectBeginY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessorState_detectW_set(void * jarg1, int jarg2) {
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  int arg2 ;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->detectW = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFaceProcessorState_detectW_get(void * jarg1) {
  int jresult ;
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  int result;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  result = (int) ((arg1)->detectW);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessorState_detectH_set(void * jarg1, int jarg2) {
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  int arg2 ;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->detectH = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFaceProcessorState_detectH_get(void * jarg1) {
  int jresult ;
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  int result;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  result = (int) ((arg1)->detectH);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessorState_faceProgress_set(void * jarg1, float jarg2) {
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  float arg2 ;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->faceProgress = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IKFaceProcessorState_faceProgress_get(void * jarg1) {
  float jresult ;
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  float result;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  result = (float) ((arg1)->faceProgress);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessorState_throwAwayFrameStatus_set(void * jarg1, int jarg2) {
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  int arg2 ;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->throwAwayFrameStatus = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFaceProcessorState_throwAwayFrameStatus_get(void * jarg1) {
  int jresult ;
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  int result;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  result = (int) ((arg1)->throwAwayFrameStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceProcessorState_imageIndex_set(void * jarg1, int jarg2) {
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  int arg2 ;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->imageIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFaceProcessorState_imageIndex_get(void * jarg1) {
  int jresult ;
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  int result;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  result = (int) ((arg1)->imageIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IKFaceProcessorState() {
  void * jresult ;
  IKFaceProcessorState *result = 0 ;
  
  result = (IKFaceProcessorState *)new IKFaceProcessorState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKFaceProcessorState(void * jarg1) {
  IKFaceProcessorState *arg1 = (IKFaceProcessorState *) 0 ;
  
  arg1 = (IKFaceProcessorState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceDebugInfo_throwAwayFrameStatus_set(void * jarg1, int jarg2) {
  IKFaceDebugInfo *arg1 = (IKFaceDebugInfo *) 0 ;
  int arg2 ;
  
  arg1 = (IKFaceDebugInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->throwAwayFrameStatus = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFaceDebugInfo_throwAwayFrameStatus_get(void * jarg1) {
  int jresult ;
  IKFaceDebugInfo *arg1 = (IKFaceDebugInfo *) 0 ;
  int result;
  
  arg1 = (IKFaceDebugInfo *)jarg1; 
  result = (int) ((arg1)->throwAwayFrameStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceDebugInfo_faceInfoNum_set(void * jarg1, int jarg2) {
  IKFaceDebugInfo *arg1 = (IKFaceDebugInfo *) 0 ;
  int arg2 ;
  
  arg1 = (IKFaceDebugInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->faceInfoNum = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFaceDebugInfo_faceInfoNum_get(void * jarg1) {
  int jresult ;
  IKFaceDebugInfo *arg1 = (IKFaceDebugInfo *) 0 ;
  int result;
  
  arg1 = (IKFaceDebugInfo *)jarg1; 
  result = (int) ((arg1)->faceInfoNum);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFaceDebugInfo_faceInfo_set(void * jarg1, void * jarg2) {
  IKFaceDebugInfo *arg1 = (IKFaceDebugInfo *) 0 ;
  IKFaceProcessedResult *arg2 = (IKFaceProcessedResult *) 0 ;
  
  arg1 = (IKFaceDebugInfo *)jarg1; 
  arg2 = (IKFaceProcessedResult *)jarg2; 
  if (arg1) (arg1)->faceInfo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKFaceDebugInfo_faceInfo_get(void * jarg1) {
  void * jresult ;
  IKFaceDebugInfo *arg1 = (IKFaceDebugInfo *) 0 ;
  IKFaceProcessedResult *result = 0 ;
  
  arg1 = (IKFaceDebugInfo *)jarg1; 
  result = (IKFaceProcessedResult *) ((arg1)->faceInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IKFaceDebugInfo() {
  void * jresult ;
  IKFaceDebugInfo *result = 0 ;
  
  result = (IKFaceDebugInfo *)new IKFaceDebugInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKFaceDebugInfo(void * jarg1) {
  IKFaceDebugInfo *arg1 = (IKFaceDebugInfo *) 0 ;
  
  arg1 = (IKFaceDebugInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_VERSION_LENGTH_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_VERSION_LENGTH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_UnknownInfoLen_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_UnknownInfoLen;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_CompleteInfoByte_IrisImFE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_CompleteInfoByte_IrisImFE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_IRIS_ENROLL_FEATURE_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_IRIS_ENROLL_FEATURE_SIZE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_IRIS_IDEN_FEATURE_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_IRIS_IDEN_FEATURE_SIZE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_IRIS_IMG_HEIGHT_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_IRIS_IMG_HEIGHT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_IRIS_IMG_WIDTH_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_IRIS_IMG_WIDTH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_IRIS_IMG_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_IRIS_IMG_SIZE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_IRIS_MIN_ENR_TIME_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_IRIS_MIN_ENR_TIME;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_IRIS_MAX_ENR_TIME_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_IRIS_MAX_ENR_TIME;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_IRIS_MIN_REC_TIME_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_IRIS_MIN_REC_TIME;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_IRIS_MAX_REC_TIME_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_IRIS_MAX_REC_TIME;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_IRIS_NEED_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_IRIS_NEED_COUNT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Ori_ImH_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Ori_ImH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Ori_ImW_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Ori_ImW;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Ori_ImD_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Ori_ImD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_MAX_IM_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_MAX_IM_SIZE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_RESERVEDINFO_LEN_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_RESERVEDINFO_LEN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_RESERVEDINFO_DEBUG_FOCUSSCORE_L_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_RESERVEDINFO_DEBUG_FOCUSSCORE_L;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_RESERVEDINFO_DEBUG_FOCUSSCORE_R_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_RESERVEDINFO_DEBUG_FOCUSSCORE_R;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_RESERVEDINFO_DEBUG_PERCENTVISIBLE_L_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_RESERVEDINFO_DEBUG_PERCENTVISIBLE_L;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_RESERVEDINFO_DEBUG_PERCENTVISIBLE_R_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_RESERVEDINFO_DEBUG_PERCENTVISIBLE_R;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_RESERVEDINFO_DEBUG_BRIGHTNESS_L_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_RESERVEDINFO_DEBUG_BRIGHTNESS_L;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_RESERVEDINFO_DEBUG_BRIGHTNESS_R_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_RESERVEDINFO_DEBUG_BRIGHTNESS_R;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_RESERVEDINFO_DEBUG_MOTIONBLUR_L_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_RESERVEDINFO_DEBUG_MOTIONBLUR_L;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_RESERVEDINFO_DEBUG_MOTIONBLUR_R_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_RESERVEDINFO_DEBUG_MOTIONBLUR_R;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_RESERVEDINFO_DEBUG_GLASSFLAG_L_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_RESERVEDINFO_DEBUG_GLASSFLAG_L;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_RESERVEDINFO_DEBUG_GLASSFLAG_R_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_RESERVEDINFO_DEBUG_GLASSFLAG_R;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_RESERVEDINFO_DEBUG_QUALITYSCORE_L_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_RESERVEDINFO_DEBUG_QUALITYSCORE_L;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_RESERVEDINFO_DEBUG_QUALITYSCORE_R_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_RESERVEDINFO_DEBUG_QUALITYSCORE_R;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Fun_Success_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Fun_Success;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_BASE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_BASE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_ENR_IDEN_INTERRUPT_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_ENR_IDEN_INTERRUPT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_INIT_FAILED_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_INIT_FAILED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_INVALID_LICENSE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_INVALID_LICENSE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_INVALID_PARAMETER_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_INVALID_PARAMETER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_INVALID_CONFIGTRACENUM_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_INVALID_CONFIGTRACENUM;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_INVALID_DELETEAREA_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_INVALID_DELETEAREA;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_VERYFYDEV_ERROR_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_VERYFYDEV_ERROR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_INVALID_OVERTIME_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_INVALID_OVERTIME;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_INVALID_ENRNUM_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_INVALID_ENRNUM;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_DEVICE_UPSIDEDOWN_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_DEVICE_UPSIDEDOWN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_ENR_IDEN_FAILED_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_ENR_IDEN_FAILED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_INVALID_IRIS_DEVICETYPE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_INVALID_IRIS_DEVICETYPE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_FAIL2STOP_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_FAIL2STOP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_INVALID_IRIS_MODE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_INVALID_IRIS_MODE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_ENROLLIDEN_OVERTIME_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_ENROLLIDEN_OVERTIME;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_IDEN_UNSUPPORT_FEATURE_NUM_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_IDEN_UNSUPPORT_FEATURE_NUM;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_ASYNCTASK_BUSY_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_ASYNCTASK_BUSY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_Fea_Unmatch_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_Fea_Unmatch;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_Data_Interrupted_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_Data_Interrupted;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_Invalid_Setting_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_Invalid_Setting;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_Handle_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_Handle;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_RESET_BUSY_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_RESET_BUSY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_IMG_NUM_DIFFERROR_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_IMG_NUM_DIFFERROR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_RESET_CLEAR_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_RESET_CLEAR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_RESET_FAILED_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_RESET_FAILED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_QUEUE_FULL_CLEAR_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_QUEUE_FULL_CLEAR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_QUEUE_ENR_IDEN_END_CLEAR_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_QUEUE_ENR_IDEN_END_CLEAR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_CLEAR_CACHE_FAILED_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_CLEAR_CACHE_FAILED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIris_Err_SELECTION_NOTREACHED_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IKIris_Err_SELECTION_NOTREACHED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisMatchOutput_matchScore_set(void * jarg1, int jarg2) {
  tagIKIrisMatchOutputStruct *arg1 = (tagIKIrisMatchOutputStruct *) 0 ;
  int arg2 ;
  
  arg1 = (tagIKIrisMatchOutputStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->matchScore = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisMatchOutput_matchScore_get(void * jarg1) {
  int jresult ;
  tagIKIrisMatchOutputStruct *arg1 = (tagIKIrisMatchOutputStruct *) 0 ;
  int result;
  
  arg1 = (tagIKIrisMatchOutputStruct *)jarg1; 
  result = (int) ((arg1)->matchScore);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisMatchOutput_matchIndex_set(void * jarg1, int jarg2) {
  tagIKIrisMatchOutputStruct *arg1 = (tagIKIrisMatchOutputStruct *) 0 ;
  int arg2 ;
  
  arg1 = (tagIKIrisMatchOutputStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->matchIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisMatchOutput_matchIndex_get(void * jarg1) {
  int jresult ;
  tagIKIrisMatchOutputStruct *arg1 = (tagIKIrisMatchOutputStruct *) 0 ;
  int result;
  
  arg1 = (tagIKIrisMatchOutputStruct *)jarg1; 
  result = (int) ((arg1)->matchIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IKIrisMatchOutput() {
  void * jresult ;
  tagIKIrisMatchOutputStruct *result = 0 ;
  
  result = (tagIKIrisMatchOutputStruct *)new tagIKIrisMatchOutputStruct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKIrisMatchOutput(void * jarg1) {
  tagIKIrisMatchOutputStruct *arg1 = (tagIKIrisMatchOutputStruct *) 0 ;
  
  arg1 = (tagIKIrisMatchOutputStruct *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisPos_IrisPos_xPixel_set(void * jarg1, int jarg2) {
  IKIrisPosStruct::IrisPos *arg1 = (IKIrisPosStruct::IrisPos *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisPosStruct::IrisPos *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->xPixel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisPos_IrisPos_xPixel_get(void * jarg1) {
  int jresult ;
  IKIrisPosStruct::IrisPos *arg1 = (IKIrisPosStruct::IrisPos *) 0 ;
  int result;
  
  arg1 = (IKIrisPosStruct::IrisPos *)jarg1; 
  result = (int) ((arg1)->xPixel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisPos_IrisPos_yPixel_set(void * jarg1, int jarg2) {
  IKIrisPosStruct::IrisPos *arg1 = (IKIrisPosStruct::IrisPos *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisPosStruct::IrisPos *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->yPixel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisPos_IrisPos_yPixel_get(void * jarg1) {
  int jresult ;
  IKIrisPosStruct::IrisPos *arg1 = (IKIrisPosStruct::IrisPos *) 0 ;
  int result;
  
  arg1 = (IKIrisPosStruct::IrisPos *)jarg1; 
  result = (int) ((arg1)->yPixel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisPos_IrisPos_radius_set(void * jarg1, int jarg2) {
  IKIrisPosStruct::IrisPos *arg1 = (IKIrisPosStruct::IrisPos *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisPosStruct::IrisPos *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisPos_IrisPos_radius_get(void * jarg1) {
  int jresult ;
  IKIrisPosStruct::IrisPos *arg1 = (IKIrisPosStruct::IrisPos *) 0 ;
  int result;
  
  arg1 = (IKIrisPosStruct::IrisPos *)jarg1; 
  result = (int) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IKIrisPos_IrisPos() {
  void * jresult ;
  IKIrisPosStruct::IrisPos *result = 0 ;
  
  result = (IKIrisPosStruct::IrisPos *)new IKIrisPosStruct::IrisPos();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKIrisPos_IrisPos(void * jarg1) {
  IKIrisPosStruct::IrisPos *arg1 = (IKIrisPosStruct::IrisPos *) 0 ;
  
  arg1 = (IKIrisPosStruct::IrisPos *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisPos_leftIrisPos_set(void * jarg1, void * jarg2) {
  IKIrisPosStruct *arg1 = (IKIrisPosStruct *) 0 ;
  IKIrisPosStruct::IrisPos *arg2 = (IKIrisPosStruct::IrisPos *) 0 ;
  
  arg1 = (IKIrisPosStruct *)jarg1; 
  arg2 = (IKIrisPosStruct::IrisPos *)jarg2; 
  if (arg1) (arg1)->leftIrisPos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKIrisPos_leftIrisPos_get(void * jarg1) {
  void * jresult ;
  IKIrisPosStruct *arg1 = (IKIrisPosStruct *) 0 ;
  IKIrisPosStruct::IrisPos *result = 0 ;
  
  arg1 = (IKIrisPosStruct *)jarg1; 
  result = (IKIrisPosStruct::IrisPos *)& ((arg1)->leftIrisPos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisPos_rightIrisPos_set(void * jarg1, void * jarg2) {
  IKIrisPosStruct *arg1 = (IKIrisPosStruct *) 0 ;
  IKIrisPosStruct::IrisPos *arg2 = (IKIrisPosStruct::IrisPos *) 0 ;
  
  arg1 = (IKIrisPosStruct *)jarg1; 
  arg2 = (IKIrisPosStruct::IrisPos *)jarg2; 
  if (arg1) (arg1)->rightIrisPos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKIrisPos_rightIrisPos_get(void * jarg1) {
  void * jresult ;
  IKIrisPosStruct *arg1 = (IKIrisPosStruct *) 0 ;
  IKIrisPosStruct::IrisPos *result = 0 ;
  
  arg1 = (IKIrisPosStruct *)jarg1; 
  result = (IKIrisPosStruct::IrisPos *)& ((arg1)->rightIrisPos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisPos_dist_set(void * jarg1, int jarg2) {
  IKIrisPosStruct *arg1 = (IKIrisPosStruct *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisPosStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->dist = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisPos_dist_get(void * jarg1) {
  int jresult ;
  IKIrisPosStruct *arg1 = (IKIrisPosStruct *) 0 ;
  int result;
  
  arg1 = (IKIrisPosStruct *)jarg1; 
  result = (int) ((arg1)->dist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IKIrisPos() {
  void * jresult ;
  IKIrisPosStruct *result = 0 ;
  
  result = (IKIrisPosStruct *)new IKIrisPosStruct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKIrisPos(void * jarg1) {
  IKIrisPosStruct *arg1 = (IKIrisPosStruct *) 0 ;
  
  arg1 = (IKIrisPosStruct *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisInfo_creat(void * jarg1) {
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  (arg1)->creat();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisInfo_distroy(void * jarg1) {
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  (arg1)->distroy();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisInfo_Init(void * jarg1) {
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  (arg1)->Init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisInfo_ImgHeight_set(void * jarg1, int jarg2) {
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ImgHeight = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisInfo_ImgHeight_get(void * jarg1) {
  int jresult ;
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int result;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  result = (int) ((arg1)->ImgHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisInfo_ImgWidth_set(void * jarg1, int jarg2) {
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ImgWidth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisInfo_ImgWidth_get(void * jarg1) {
  int jresult ;
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int result;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  result = (int) ((arg1)->ImgWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisInfo_ImgType_set(void * jarg1, int jarg2) {
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ImgType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisInfo_ImgType_get(void * jarg1) {
  int jresult ;
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int result;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  result = (int) ((arg1)->ImgType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisInfo_IrisRow_set(void * jarg1, int jarg2) {
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->IrisRow = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisInfo_IrisRow_get(void * jarg1) {
  int jresult ;
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int result;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  result = (int) ((arg1)->IrisRow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisInfo_IrisCol_set(void * jarg1, int jarg2) {
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->IrisCol = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisInfo_IrisCol_get(void * jarg1) {
  int jresult ;
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int result;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  result = (int) ((arg1)->IrisCol);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisInfo_IrisRadius_set(void * jarg1, int jarg2) {
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->IrisRadius = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisInfo_IrisRadius_get(void * jarg1) {
  int jresult ;
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int result;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  result = (int) ((arg1)->IrisRadius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisInfo_FocusScore_set(void * jarg1, int jarg2) {
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FocusScore = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisInfo_FocusScore_get(void * jarg1) {
  int jresult ;
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int result;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  result = (int) ((arg1)->FocusScore);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisInfo_PercentVisible_set(void * jarg1, int jarg2) {
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PercentVisible = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisInfo_PercentVisible_get(void * jarg1) {
  int jresult ;
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int result;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  result = (int) ((arg1)->PercentVisible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisInfo_Brightness_set(void * jarg1, int jarg2) {
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Brightness = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisInfo_Brightness_get(void * jarg1) {
  int jresult ;
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int result;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  result = (int) ((arg1)->Brightness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisInfo_MotionBlur_set(void * jarg1, int jarg2) {
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MotionBlur = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisInfo_MotionBlur_get(void * jarg1) {
  int jresult ;
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int result;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  result = (int) ((arg1)->MotionBlur);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisInfo_QualityScore_set(void * jarg1, int jarg2) {
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->QualityScore = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisInfo_QualityScore_get(void * jarg1) {
  int jresult ;
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int result;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  result = (int) ((arg1)->QualityScore);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisInfo_imgData_set(void * jarg1, void * jarg2) {
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  if (arg1) (arg1)->imgData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKIrisInfo_imgData_get(void * jarg1) {
  void * jresult ;
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  result = (unsigned char *) ((arg1)->imgData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisInfo_imgDataLen_set(void * jarg1, int jarg2) {
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->imgDataLen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisInfo_imgDataLen_get(void * jarg1) {
  int jresult ;
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int result;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  result = (int) ((arg1)->imgDataLen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisInfo_imgDataMat_set(void * jarg1, void * jarg2) {
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  if (arg1) (arg1)->imgDataMat = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKIrisInfo_imgDataMat_get(void * jarg1) {
  void * jresult ;
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  result = (unsigned char *) ((arg1)->imgDataMat);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisInfo_imgDataMatLen_set(void * jarg1, int jarg2) {
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->imgDataMatLen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisInfo_imgDataMatLen_get(void * jarg1) {
  int jresult ;
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int result;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  result = (int) ((arg1)->imgDataMatLen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisInfo_irisEnrTemplate_set(void * jarg1, void * jarg2) {
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  if (arg1) (arg1)->irisEnrTemplate = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKIrisInfo_irisEnrTemplate_get(void * jarg1) {
  void * jresult ;
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  result = (unsigned char *) ((arg1)->irisEnrTemplate);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisInfo_irisEnrTemplateLen_set(void * jarg1, int jarg2) {
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->irisEnrTemplateLen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisInfo_irisEnrTemplateLen_get(void * jarg1) {
  int jresult ;
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int result;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  result = (int) ((arg1)->irisEnrTemplateLen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisInfo_irisRecTemplate_set(void * jarg1, void * jarg2) {
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  if (arg1) (arg1)->irisRecTemplate = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKIrisInfo_irisRecTemplate_get(void * jarg1) {
  void * jresult ;
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  result = (unsigned char *) ((arg1)->irisRecTemplate);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisInfo_irisRecTemplateLen_set(void * jarg1, int jarg2) {
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->irisRecTemplateLen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisInfo_irisRecTemplateLen_get(void * jarg1) {
  int jresult ;
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int result;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  result = (int) ((arg1)->irisRecTemplateLen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisInfo_irisInfoUnkonwn_set(void * jarg1, void * jarg2) {
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->irisInfoUnkonwn = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKIrisInfo_irisInfoUnkonwn_get(void * jarg1) {
  void * jresult ;
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int *result = 0 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  result = (int *) ((arg1)->irisInfoUnkonwn);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisInfo_irisInfoUnkonwnLen_set(void * jarg1, int jarg2) {
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->irisInfoUnkonwnLen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisInfo_irisInfoUnkonwnLen_get(void * jarg1) {
  int jresult ;
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  int result;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  result = (int) ((arg1)->irisInfoUnkonwnLen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IKIrisInfo() {
  void * jresult ;
  IKIrisInfoStruct *result = 0 ;
  
  result = (IKIrisInfoStruct *)new IKIrisInfoStruct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKIrisInfo(void * jarg1) {
  IKIrisInfoStruct *arg1 = (IKIrisInfoStruct *) 0 ;
  
  arg1 = (IKIrisInfoStruct *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisProcessorState_workMode_set(void * jarg1, int jarg2) {
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  IKIrisWorkMode arg2 ;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  arg2 = (IKIrisWorkMode)jarg2; 
  if (arg1) (arg1)->workMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisProcessorState_workMode_get(void * jarg1) {
  int jresult ;
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  IKIrisWorkMode result;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  result = (IKIrisWorkMode) ((arg1)->workMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisProcessorState_detectType_set(void * jarg1, int jarg2) {
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->detectType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisProcessorState_detectType_get(void * jarg1) {
  int jresult ;
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  int result;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  result = (int) ((arg1)->detectType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisProcessorState_irisMode_set(void * jarg1, int jarg2) {
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  IKIrisMode arg2 ;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  arg2 = (IKIrisMode)jarg2; 
  if (arg1) (arg1)->irisMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisProcessorState_irisMode_get(void * jarg1) {
  int jresult ;
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  IKIrisMode result;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  result = (IKIrisMode) ((arg1)->irisMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisProcessorState_leftIrisProgress_set(void * jarg1, float jarg2) {
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  float arg2 ;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->leftIrisProgress = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IKIrisProcessorState_leftIrisProgress_get(void * jarg1) {
  float jresult ;
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  float result;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  result = (float) ((arg1)->leftIrisProgress);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisProcessorState_rightIrisProgress_set(void * jarg1, float jarg2) {
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  float arg2 ;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rightIrisProgress = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IKIrisProcessorState_rightIrisProgress_get(void * jarg1) {
  float jresult ;
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  float result;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  result = (float) ((arg1)->rightIrisProgress);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisProcessorState_imageW_set(void * jarg1, int jarg2) {
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->imageW = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisProcessorState_imageW_get(void * jarg1) {
  int jresult ;
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  int result;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  result = (int) ((arg1)->imageW);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisProcessorState_imageH_set(void * jarg1, int jarg2) {
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->imageH = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisProcessorState_imageH_get(void * jarg1) {
  int jresult ;
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  int result;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  result = (int) ((arg1)->imageH);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisProcessorState_irisPos_set(void * jarg1, void * jarg2) {
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  IKIrisPos *arg2 = (IKIrisPos *) 0 ;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  arg2 = (IKIrisPos *)jarg2; 
  if (arg1) (arg1)->irisPos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKIrisProcessorState_irisPos_get(void * jarg1) {
  void * jresult ;
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  IKIrisPos *result = 0 ;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  result = (IKIrisPos *)& ((arg1)->irisPos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisProcessorState_throwAwayFrameStatus_set(void * jarg1, int jarg2) {
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->throwAwayFrameStatus = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisProcessorState_throwAwayFrameStatus_get(void * jarg1) {
  int jresult ;
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  int result;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  result = (int) ((arg1)->throwAwayFrameStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisProcessorState_irisID_set(void * jarg1, int jarg2) {
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->irisID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisProcessorState_irisID_get(void * jarg1) {
  int jresult ;
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  int result;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  result = (int) ((arg1)->irisID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisProcessorState_faceID_set(void * jarg1, int jarg2) {
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->faceID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisProcessorState_faceID_get(void * jarg1) {
  int jresult ;
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  int result;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  result = (int) ((arg1)->faceID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisProcessorState_traceID_set(void * jarg1, int jarg2) {
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->traceID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisProcessorState_traceID_get(void * jarg1) {
  int jresult ;
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  int result;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  result = (int) ((arg1)->traceID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisProcessorState_irisLeftMargin_set(void * jarg1, int jarg2) {
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->irisLeftMargin = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisProcessorState_irisLeftMargin_get(void * jarg1) {
  int jresult ;
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  int result;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  result = (int) ((arg1)->irisLeftMargin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisProcessorState_irisRightMargin_set(void * jarg1, int jarg2) {
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->irisRightMargin = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisProcessorState_irisRightMargin_get(void * jarg1) {
  int jresult ;
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  int result;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  result = (int) ((arg1)->irisRightMargin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisProcessorState_irisTopMargin_set(void * jarg1, int jarg2) {
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->irisTopMargin = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisProcessorState_irisTopMargin_get(void * jarg1) {
  int jresult ;
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  int result;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  result = (int) ((arg1)->irisTopMargin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisProcessorState_irisBottomMargin_set(void * jarg1, int jarg2) {
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->irisBottomMargin = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisProcessorState_irisBottomMargin_get(void * jarg1) {
  int jresult ;
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  int result;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  result = (int) ((arg1)->irisBottomMargin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisProcessorState_reservedInfo_set(void * jarg1, void * jarg2) {
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  int *arg2 ;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->reservedInfo;
    for (ii = 0; ii < (size_t)IKIris_RESERVEDINFO_LEN; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKIrisProcessorState_reservedInfo_get(void * jarg1) {
  void * jresult ;
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  int *result = 0 ;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  result = (int *)(int *) ((arg1)->reservedInfo);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IKIrisProcessorState() {
  void * jresult ;
  IKIrisProcessorState *result = 0 ;
  
  result = (IKIrisProcessorState *)new IKIrisProcessorState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKIrisProcessorState(void * jarg1) {
  IKIrisProcessorState *arg1 = (IKIrisProcessorState *) 0 ;
  
  arg1 = (IKIrisProcessorState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisDebugInfo_throwAwayFrameStatus_set(void * jarg1, int jarg2) {
  IKIrisDebugInfo *arg1 = (IKIrisDebugInfo *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisDebugInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->throwAwayFrameStatus = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisDebugInfo_throwAwayFrameStatus_get(void * jarg1) {
  int jresult ;
  IKIrisDebugInfo *arg1 = (IKIrisDebugInfo *) 0 ;
  int result;
  
  arg1 = (IKIrisDebugInfo *)jarg1; 
  result = (int) ((arg1)->throwAwayFrameStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisDebugInfo_irisInfoNum_set(void * jarg1, int jarg2) {
  IKIrisDebugInfo *arg1 = (IKIrisDebugInfo *) 0 ;
  int arg2 ;
  
  arg1 = (IKIrisDebugInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->irisInfoNum = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisDebugInfo_irisInfoNum_get(void * jarg1) {
  int jresult ;
  IKIrisDebugInfo *arg1 = (IKIrisDebugInfo *) 0 ;
  int result;
  
  arg1 = (IKIrisDebugInfo *)jarg1; 
  result = (int) ((arg1)->irisInfoNum);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisDebugInfo_irisInfo_set(void * jarg1, void * jarg2) {
  IKIrisDebugInfo *arg1 = (IKIrisDebugInfo *) 0 ;
  IKIrisInfo *arg2 = (IKIrisInfo *) 0 ;
  
  arg1 = (IKIrisDebugInfo *)jarg1; 
  arg2 = (IKIrisInfo *)jarg2; 
  if (arg1) (arg1)->irisInfo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKIrisDebugInfo_irisInfo_get(void * jarg1) {
  void * jresult ;
  IKIrisDebugInfo *arg1 = (IKIrisDebugInfo *) 0 ;
  IKIrisInfo *result = 0 ;
  
  arg1 = (IKIrisDebugInfo *)jarg1; 
  result = (IKIrisInfo *) ((arg1)->irisInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IKIrisDebugInfo() {
  void * jresult ;
  IKIrisDebugInfo *result = 0 ;
  
  result = (IKIrisDebugInfo *)new IKIrisDebugInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKIrisDebugInfo(void * jarg1) {
  IKIrisDebugInfo *arg1 = (IKIrisDebugInfo *) 0 ;
  
  arg1 = (IKIrisDebugInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisProcessedResult_irisMode_set(void * jarg1, int jarg2) {
  tagIKIrisProcessedResult *arg1 = (tagIKIrisProcessedResult *) 0 ;
  IKIrisMode arg2 ;
  
  arg1 = (tagIKIrisProcessedResult *)jarg1; 
  arg2 = (IKIrisMode)jarg2; 
  if (arg1) (arg1)->irisMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisProcessedResult_irisMode_get(void * jarg1) {
  int jresult ;
  tagIKIrisProcessedResult *arg1 = (tagIKIrisProcessedResult *) 0 ;
  IKIrisMode result;
  
  arg1 = (tagIKIrisProcessedResult *)jarg1; 
  result = (IKIrisMode) ((arg1)->irisMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisProcessedResult_flag_set(void * jarg1, int jarg2) {
  tagIKIrisProcessedResult *arg1 = (tagIKIrisProcessedResult *) 0 ;
  IKIrisResultFlag arg2 ;
  
  arg1 = (tagIKIrisProcessedResult *)jarg1; 
  arg2 = (IKIrisResultFlag)jarg2; 
  if (arg1) (arg1)->flag = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisProcessedResult_flag_get(void * jarg1) {
  int jresult ;
  tagIKIrisProcessedResult *arg1 = (tagIKIrisProcessedResult *) 0 ;
  IKIrisResultFlag result;
  
  arg1 = (tagIKIrisProcessedResult *)jarg1; 
  result = (IKIrisResultFlag) ((arg1)->flag);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisProcessedResult_irisInfo_set(void * jarg1, void * jarg2) {
  tagIKIrisProcessedResult *arg1 = (tagIKIrisProcessedResult *) 0 ;
  IKIrisInfo *arg2 = (IKIrisInfo *) 0 ;
  
  arg1 = (tagIKIrisProcessedResult *)jarg1; 
  arg2 = (IKIrisInfo *)jarg2; 
  if (arg1) (arg1)->irisInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKIrisProcessedResult_irisInfo_get(void * jarg1) {
  void * jresult ;
  tagIKIrisProcessedResult *arg1 = (tagIKIrisProcessedResult *) 0 ;
  IKIrisInfo *result = 0 ;
  
  arg1 = (tagIKIrisProcessedResult *)jarg1; 
  result = (IKIrisInfo *)& ((arg1)->irisInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IKIrisProcessedResult() {
  void * jresult ;
  tagIKIrisProcessedResult *result = 0 ;
  
  result = (tagIKIrisProcessedResult *)new tagIKIrisProcessedResult();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKIrisProcessedResult(void * jarg1) {
  tagIKIrisProcessedResult *arg1 = (tagIKIrisProcessedResult *) 0 ;
  
  arg1 = (tagIKIrisProcessedResult *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisIdentProcessedResultStruct__nFunResult_set(void * jarg1, int jarg2) {
  tagIKIrisIdentProcessedResultStruct *arg1 = (tagIKIrisIdentProcessedResultStruct *) 0 ;
  int arg2 ;
  
  arg1 = (tagIKIrisIdentProcessedResultStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_nFunResult = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisIdentProcessedResultStruct__nFunResult_get(void * jarg1) {
  int jresult ;
  tagIKIrisIdentProcessedResultStruct *arg1 = (tagIKIrisIdentProcessedResultStruct *) 0 ;
  int result;
  
  arg1 = (tagIKIrisIdentProcessedResultStruct *)jarg1; 
  result = (int) ((arg1)->_nFunResult);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisIdentProcessedResultStruct__irisMode_set(void * jarg1, int jarg2) {
  tagIKIrisIdentProcessedResultStruct *arg1 = (tagIKIrisIdentProcessedResultStruct *) 0 ;
  IKIrisMode arg2 ;
  
  arg1 = (tagIKIrisIdentProcessedResultStruct *)jarg1; 
  arg2 = (IKIrisMode)jarg2; 
  if (arg1) (arg1)->_irisMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisIdentProcessedResultStruct__irisMode_get(void * jarg1) {
  int jresult ;
  tagIKIrisIdentProcessedResultStruct *arg1 = (tagIKIrisIdentProcessedResultStruct *) 0 ;
  IKIrisMode result;
  
  arg1 = (tagIKIrisIdentProcessedResultStruct *)jarg1; 
  result = (IKIrisMode) ((arg1)->_irisMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisIdentProcessedResultStruct__flag_set(void * jarg1, int jarg2) {
  tagIKIrisIdentProcessedResultStruct *arg1 = (tagIKIrisIdentProcessedResultStruct *) 0 ;
  IKIrisResultFlag arg2 ;
  
  arg1 = (tagIKIrisIdentProcessedResultStruct *)jarg1; 
  arg2 = (IKIrisResultFlag)jarg2; 
  if (arg1) (arg1)->_flag = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIrisIdentProcessedResultStruct__flag_get(void * jarg1) {
  int jresult ;
  tagIKIrisIdentProcessedResultStruct *arg1 = (tagIKIrisIdentProcessedResultStruct *) 0 ;
  IKIrisResultFlag result;
  
  arg1 = (tagIKIrisIdentProcessedResultStruct *)jarg1; 
  result = (IKIrisResultFlag) ((arg1)->_flag);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisIdentProcessedResultStruct__matchOutputL_set(void * jarg1, void * jarg2) {
  tagIKIrisIdentProcessedResultStruct *arg1 = (tagIKIrisIdentProcessedResultStruct *) 0 ;
  IKIrisMatchOutput *arg2 = (IKIrisMatchOutput *) 0 ;
  
  arg1 = (tagIKIrisIdentProcessedResultStruct *)jarg1; 
  arg2 = (IKIrisMatchOutput *)jarg2; 
  if (arg1) (arg1)->_matchOutputL = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKIrisIdentProcessedResultStruct__matchOutputL_get(void * jarg1) {
  void * jresult ;
  tagIKIrisIdentProcessedResultStruct *arg1 = (tagIKIrisIdentProcessedResultStruct *) 0 ;
  IKIrisMatchOutput *result = 0 ;
  
  arg1 = (tagIKIrisIdentProcessedResultStruct *)jarg1; 
  result = (IKIrisMatchOutput *)& ((arg1)->_matchOutputL);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisIdentProcessedResultStruct__matchOutputR_set(void * jarg1, void * jarg2) {
  tagIKIrisIdentProcessedResultStruct *arg1 = (tagIKIrisIdentProcessedResultStruct *) 0 ;
  IKIrisMatchOutput *arg2 = (IKIrisMatchOutput *) 0 ;
  
  arg1 = (tagIKIrisIdentProcessedResultStruct *)jarg1; 
  arg2 = (IKIrisMatchOutput *)jarg2; 
  if (arg1) (arg1)->_matchOutputR = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKIrisIdentProcessedResultStruct__matchOutputR_get(void * jarg1) {
  void * jresult ;
  tagIKIrisIdentProcessedResultStruct *arg1 = (tagIKIrisIdentProcessedResultStruct *) 0 ;
  IKIrisMatchOutput *result = 0 ;
  
  arg1 = (tagIKIrisIdentProcessedResultStruct *)jarg1; 
  result = (IKIrisMatchOutput *)& ((arg1)->_matchOutputR);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisIdentProcessedResultStruct__irisInfoL_set(void * jarg1, void * jarg2) {
  tagIKIrisIdentProcessedResultStruct *arg1 = (tagIKIrisIdentProcessedResultStruct *) 0 ;
  pIKIrisInfo arg2 = (pIKIrisInfo) 0 ;
  
  arg1 = (tagIKIrisIdentProcessedResultStruct *)jarg1; 
  arg2 = (pIKIrisInfo)jarg2; 
  if (arg1) (arg1)->_irisInfoL = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKIrisIdentProcessedResultStruct__irisInfoL_get(void * jarg1) {
  void * jresult ;
  tagIKIrisIdentProcessedResultStruct *arg1 = (tagIKIrisIdentProcessedResultStruct *) 0 ;
  pIKIrisInfo result;
  
  arg1 = (tagIKIrisIdentProcessedResultStruct *)jarg1; 
  result = (pIKIrisInfo) ((arg1)->_irisInfoL);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIrisIdentProcessedResultStruct__irisInfoR_set(void * jarg1, void * jarg2) {
  tagIKIrisIdentProcessedResultStruct *arg1 = (tagIKIrisIdentProcessedResultStruct *) 0 ;
  pIKIrisInfo arg2 = (pIKIrisInfo) 0 ;
  
  arg1 = (tagIKIrisIdentProcessedResultStruct *)jarg1; 
  arg2 = (pIKIrisInfo)jarg2; 
  if (arg1) (arg1)->_irisInfoR = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKIrisIdentProcessedResultStruct__irisInfoR_get(void * jarg1) {
  void * jresult ;
  tagIKIrisIdentProcessedResultStruct *arg1 = (tagIKIrisIdentProcessedResultStruct *) 0 ;
  pIKIrisInfo result;
  
  arg1 = (tagIKIrisIdentProcessedResultStruct *)jarg1; 
  result = (pIKIrisInfo) ((arg1)->_irisInfoR);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IKIrisIdentProcessedResultStruct() {
  void * jresult ;
  tagIKIrisIdentProcessedResultStruct *result = 0 ;
  
  result = (tagIKIrisIdentProcessedResultStruct *)new tagIKIrisIdentProcessedResultStruct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKIrisIdentProcessedResultStruct(void * jarg1) {
  tagIKIrisIdentProcessedResultStruct *arg1 = (tagIKIrisIdentProcessedResultStruct *) 0 ;
  
  arg1 = (tagIKIrisIdentProcessedResultStruct *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_creatobj() {
  void * jresult ;
  IKBaseSDKAPI *result = 0 ;
  
  result = (IKBaseSDKAPI *)creatobj();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CONF_FILE_PATH_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("IKConfig.ini");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_Fun_Success_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_Fun_Success;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_Err_BASE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_Err_BASE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_Err_INIT_FAILED_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_Err_INIT_FAILED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_Err_INVALID_PARAMETER_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_Err_INVALID_PARAMETER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_Err_CREATEIRISCAMERA_FAILED_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_Err_CREATEIRISCAMERA_FAILED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_Err_CREATEFACECAMERA_FAILED_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_Err_CREATEFACECAMERA_FAILED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_Err_CREATEDEPTHCAMERA_FAILED_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_Err_CREATEDEPTHCAMERA_FAILED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_Err_CREATEPTZ_FAILED_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_Err_CREATEPTZ_FAILED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_Err_INVALID_ENROLLIDENTMODE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_Err_INVALID_ENROLLIDENTMODE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_Err_INVALID_MATCHMODE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_Err_INVALID_MATCHMODE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_Err_NOFOUND_CONFIGFILE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_Err_NOFOUND_CONFIGFILE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_Err_STARTIDENT_ModeUndef_FAILED_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_Err_STARTIDENT_ModeUndef_FAILED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_Err_CONFIG_FAILED_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_Err_CONFIG_FAILED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_Err_SETCONFIGFILEPATH_FAILED_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_Err_SETCONFIGFILEPATH_FAILED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_Err_ASYNCTASK_BUSY_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_Err_ASYNCTASK_BUSY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_Err_NOTSUPPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_Err_NOTSUPPORT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_Err_REPEATINIT_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_Err_REPEATINIT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_Err_INVALID_DEVICETYPE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_Err_INVALID_DEVICETYPE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_STARTIDENT_ModeUndef_IRISFAILED_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_STARTIDENT_ModeUndef_IRISFAILED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IK_STARTIDENT_ModeUndef_FACEFAILED_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IK_STARTIDENT_ModeUndef_FACEFAILED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKConfigInfo_mode_set(void * jarg1, int jarg2) {
  IKConfigInfoStruct *arg1 = (IKConfigInfoStruct *) 0 ;
  IKEnrollIdentMode arg2 ;
  
  arg1 = (IKConfigInfoStruct *)jarg1; 
  arg2 = (IKEnrollIdentMode)jarg2; 
  if (arg1) (arg1)->mode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKConfigInfo_mode_get(void * jarg1) {
  int jresult ;
  IKConfigInfoStruct *arg1 = (IKConfigInfoStruct *) 0 ;
  IKEnrollIdentMode result;
  
  arg1 = (IKConfigInfoStruct *)jarg1; 
  result = (IKEnrollIdentMode) ((arg1)->mode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKConfigInfo_irisMode_set(void * jarg1, int jarg2) {
  IKConfigInfoStruct *arg1 = (IKConfigInfoStruct *) 0 ;
  IKIrisMode arg2 ;
  
  arg1 = (IKConfigInfoStruct *)jarg1; 
  arg2 = (IKIrisMode)jarg2; 
  if (arg1) (arg1)->irisMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKConfigInfo_irisMode_get(void * jarg1) {
  int jresult ;
  IKConfigInfoStruct *arg1 = (IKConfigInfoStruct *) 0 ;
  IKIrisMode result;
  
  arg1 = (IKConfigInfoStruct *)jarg1; 
  result = (IKIrisMode) ((arg1)->irisMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKConfigInfo_irisEnrollIsEnforce_set(void * jarg1, unsigned int jarg2) {
  IKConfigInfoStruct *arg1 = (IKConfigInfoStruct *) 0 ;
  bool arg2 ;
  
  arg1 = (IKConfigInfoStruct *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->irisEnrollIsEnforce = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IKConfigInfo_irisEnrollIsEnforce_get(void * jarg1) {
  unsigned int jresult ;
  IKConfigInfoStruct *arg1 = (IKConfigInfoStruct *) 0 ;
  bool result;
  
  arg1 = (IKConfigInfoStruct *)jarg1; 
  result = (bool) ((arg1)->irisEnrollIsEnforce);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKConfigInfo_irisWorkMode_set(void * jarg1, int jarg2) {
  IKConfigInfoStruct *arg1 = (IKConfigInfoStruct *) 0 ;
  IKIrisWorkMode arg2 ;
  
  arg1 = (IKConfigInfoStruct *)jarg1; 
  arg2 = (IKIrisWorkMode)jarg2; 
  if (arg1) (arg1)->irisWorkMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKConfigInfo_irisWorkMode_get(void * jarg1) {
  int jresult ;
  IKConfigInfoStruct *arg1 = (IKConfigInfoStruct *) 0 ;
  IKIrisWorkMode result;
  
  arg1 = (IKConfigInfoStruct *)jarg1; 
  result = (IKIrisWorkMode) ((arg1)->irisWorkMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKConfigInfo_irisCount_set(void * jarg1, int jarg2) {
  IKConfigInfoStruct *arg1 = (IKConfigInfoStruct *) 0 ;
  int arg2 ;
  
  arg1 = (IKConfigInfoStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->irisCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKConfigInfo_irisCount_get(void * jarg1) {
  int jresult ;
  IKConfigInfoStruct *arg1 = (IKConfigInfoStruct *) 0 ;
  int result;
  
  arg1 = (IKConfigInfoStruct *)jarg1; 
  result = (int) ((arg1)->irisCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKConfigInfo_faceCount_set(void * jarg1, int jarg2) {
  IKConfigInfoStruct *arg1 = (IKConfigInfoStruct *) 0 ;
  int arg2 ;
  
  arg1 = (IKConfigInfoStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->faceCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKConfigInfo_faceCount_get(void * jarg1) {
  int jresult ;
  IKConfigInfoStruct *arg1 = (IKConfigInfoStruct *) 0 ;
  int result;
  
  arg1 = (IKConfigInfoStruct *)jarg1; 
  result = (int) ((arg1)->faceCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKConfigInfo_overTime_set(void * jarg1, int jarg2) {
  IKConfigInfoStruct *arg1 = (IKConfigInfoStruct *) 0 ;
  int arg2 ;
  
  arg1 = (IKConfigInfoStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->overTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKConfigInfo_overTime_get(void * jarg1) {
  int jresult ;
  IKConfigInfoStruct *arg1 = (IKConfigInfoStruct *) 0 ;
  int result;
  
  arg1 = (IKConfigInfoStruct *)jarg1; 
  result = (int) ((arg1)->overTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IKConfigInfo() {
  void * jresult ;
  IKConfigInfoStruct *result = 0 ;
  
  result = (IKConfigInfoStruct *)new IKConfigInfoStruct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKConfigInfo(void * jarg1) {
  IKConfigInfoStruct *arg1 = (IKConfigInfoStruct *) 0 ;
  
  arg1 = (IKConfigInfoStruct *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKMatchOutput_matchScore_set(void * jarg1, int jarg2) {
  IKMatchOutputStruct *arg1 = (IKMatchOutputStruct *) 0 ;
  int arg2 ;
  
  arg1 = (IKMatchOutputStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->matchScore = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKMatchOutput_matchScore_get(void * jarg1) {
  int jresult ;
  IKMatchOutputStruct *arg1 = (IKMatchOutputStruct *) 0 ;
  int result;
  
  arg1 = (IKMatchOutputStruct *)jarg1; 
  result = (int) ((arg1)->matchScore);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKMatchOutput_matchIndex_set(void * jarg1, int jarg2) {
  IKMatchOutputStruct *arg1 = (IKMatchOutputStruct *) 0 ;
  int arg2 ;
  
  arg1 = (IKMatchOutputStruct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->matchIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKMatchOutput_matchIndex_get(void * jarg1) {
  int jresult ;
  IKMatchOutputStruct *arg1 = (IKMatchOutputStruct *) 0 ;
  int result;
  
  arg1 = (IKMatchOutputStruct *)jarg1; 
  result = (int) ((arg1)->matchIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IKMatchOutput() {
  void * jresult ;
  IKMatchOutputStruct *result = 0 ;
  
  result = (IKMatchOutputStruct *)new IKMatchOutputStruct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKMatchOutput(void * jarg1) {
  IKMatchOutputStruct *arg1 = (IKMatchOutputStruct *) 0 ;
  
  arg1 = (IKMatchOutputStruct *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKBaseEnrollProcessedResult(void * jarg1) {
  IKBaseEnrollProcessedResult *arg1 = (IKBaseEnrollProcessedResult *) 0 ;
  
  arg1 = (IKBaseEnrollProcessedResult *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKBaseEnrollProcessedResult_setEnrollIdentMode(void * jarg1, int jarg2) {
  IKBaseEnrollProcessedResult *arg1 = (IKBaseEnrollProcessedResult *) 0 ;
  IKEnrollIdentMode arg2 ;
  
  arg1 = (IKBaseEnrollProcessedResult *)jarg1; 
  arg2 = (IKEnrollIdentMode)jarg2; 
  (arg1)->setEnrollIdentMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKBaseEnrollProcessedResult_getEnrollIdentMode(void * jarg1) {
  int jresult ;
  IKBaseEnrollProcessedResult *arg1 = (IKBaseEnrollProcessedResult *) 0 ;
  IKEnrollIdentMode result;
  
  arg1 = (IKBaseEnrollProcessedResult *)jarg1; 
  result = (IKEnrollIdentMode)(arg1)->getEnrollIdentMode();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKBaseEnrollProcessedResult_setEnrollIdentResFlag(void * jarg1, int jarg2) {
  IKBaseEnrollProcessedResult *arg1 = (IKBaseEnrollProcessedResult *) 0 ;
  IKEnrollIdentResultFlag arg2 ;
  
  arg1 = (IKBaseEnrollProcessedResult *)jarg1; 
  arg2 = (IKEnrollIdentResultFlag)jarg2; 
  (arg1)->setEnrollIdentResFlag(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKBaseEnrollProcessedResult_getEnrollIdentResFlag(void * jarg1) {
  int jresult ;
  IKBaseEnrollProcessedResult *arg1 = (IKBaseEnrollProcessedResult *) 0 ;
  IKEnrollIdentResultFlag result;
  
  arg1 = (IKBaseEnrollProcessedResult *)jarg1; 
  result = (IKEnrollIdentResultFlag)(arg1)->getEnrollIdentResFlag();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKBaseEnrollProcessedResult_addIrisData(void * jarg1, void * jarg2) {
  IKBaseEnrollProcessedResult *arg1 = (IKBaseEnrollProcessedResult *) 0 ;
  IKIrisProcessedResult *arg2 = 0 ;
  
  arg1 = (IKBaseEnrollProcessedResult *)jarg1; 
  arg2 = (IKIrisProcessedResult *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IKIrisProcessedResult & is null", 0);
    return ;
  } 
  (arg1)->addIrisData(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKBaseEnrollProcessedResult_addFaceData(void * jarg1, void * jarg2) {
  IKBaseEnrollProcessedResult *arg1 = (IKBaseEnrollProcessedResult *) 0 ;
  IKFaceProcessedResult *arg2 = 0 ;
  
  arg1 = (IKBaseEnrollProcessedResult *)jarg1; 
  arg2 = (IKFaceProcessedResult *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IKFaceProcessedResult & is null", 0);
    return ;
  } 
  (arg1)->addFaceData(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IKBaseEnrollProcessedResult_getIrisResultData(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  IKBaseEnrollProcessedResult *arg1 = (IKBaseEnrollProcessedResult *) 0 ;
  int arg2 ;
  IKIrisProcessedResult *arg3 = 0 ;
  bool result;
  
  arg1 = (IKBaseEnrollProcessedResult *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (IKIrisProcessedResult *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IKIrisProcessedResult & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getIrisResultData(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IKBaseEnrollProcessedResult_getFaceResultData(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  IKBaseEnrollProcessedResult *arg1 = (IKBaseEnrollProcessedResult *) 0 ;
  int arg2 ;
  IKFaceProcessedResult *arg3 = 0 ;
  bool result;
  
  arg1 = (IKBaseEnrollProcessedResult *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (IKFaceProcessedResult *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IKFaceProcessedResult & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getFaceResultData(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKBaseEnrollProcessedResult_getIrisFrameNum(void * jarg1) {
  int jresult ;
  IKBaseEnrollProcessedResult *arg1 = (IKBaseEnrollProcessedResult *) 0 ;
  int result;
  
  arg1 = (IKBaseEnrollProcessedResult *)jarg1; 
  result = (int)(arg1)->getIrisFrameNum();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKBaseEnrollProcessedResult_getFaceFrameNum(void * jarg1) {
  int jresult ;
  IKBaseEnrollProcessedResult *arg1 = (IKBaseEnrollProcessedResult *) 0 ;
  int result;
  
  arg1 = (IKBaseEnrollProcessedResult *)jarg1; 
  result = (int)(arg1)->getFaceFrameNum();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKBaseEnrollProcessedResult_setIrisRes(void * jarg1, int jarg2) {
  IKBaseEnrollProcessedResult *arg1 = (IKBaseEnrollProcessedResult *) 0 ;
  int arg2 ;
  
  arg1 = (IKBaseEnrollProcessedResult *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIrisRes(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKBaseEnrollProcessedResult_setFaceRes(void * jarg1, int jarg2) {
  IKBaseEnrollProcessedResult *arg1 = (IKBaseEnrollProcessedResult *) 0 ;
  int arg2 ;
  
  arg1 = (IKBaseEnrollProcessedResult *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setFaceRes(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKBaseEnrollProcessedResult_getIrisRes(void * jarg1) {
  int jresult ;
  IKBaseEnrollProcessedResult *arg1 = (IKBaseEnrollProcessedResult *) 0 ;
  int result;
  
  arg1 = (IKBaseEnrollProcessedResult *)jarg1; 
  result = (int)(arg1)->getIrisRes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKBaseEnrollProcessedResult_getFaceRes(void * jarg1) {
  int jresult ;
  IKBaseEnrollProcessedResult *arg1 = (IKBaseEnrollProcessedResult *) 0 ;
  int result;
  
  arg1 = (IKBaseEnrollProcessedResult *)jarg1; 
  result = (int)(arg1)->getFaceRes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIdentProcessedResultStruct__enrollIdentResFlag_set(void * jarg1, int jarg2) {
  IKIdentProcessedResultStruct *arg1 = (IKIdentProcessedResultStruct *) 0 ;
  IKEnrollIdentResultFlag arg2 ;
  
  arg1 = (IKIdentProcessedResultStruct *)jarg1; 
  arg2 = (IKEnrollIdentResultFlag)jarg2; 
  if (arg1) (arg1)->_enrollIdentResFlag = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIdentProcessedResultStruct__enrollIdentResFlag_get(void * jarg1) {
  int jresult ;
  IKIdentProcessedResultStruct *arg1 = (IKIdentProcessedResultStruct *) 0 ;
  IKEnrollIdentResultFlag result;
  
  arg1 = (IKIdentProcessedResultStruct *)jarg1; 
  result = (IKEnrollIdentResultFlag) ((arg1)->_enrollIdentResFlag);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIdentProcessedResultStruct__enrollIdentMode_set(void * jarg1, int jarg2) {
  IKIdentProcessedResultStruct *arg1 = (IKIdentProcessedResultStruct *) 0 ;
  IKEnrollIdentMode arg2 ;
  
  arg1 = (IKIdentProcessedResultStruct *)jarg1; 
  arg2 = (IKEnrollIdentMode)jarg2; 
  if (arg1) (arg1)->_enrollIdentMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKIdentProcessedResultStruct__enrollIdentMode_get(void * jarg1) {
  int jresult ;
  IKIdentProcessedResultStruct *arg1 = (IKIdentProcessedResultStruct *) 0 ;
  IKEnrollIdentMode result;
  
  arg1 = (IKIdentProcessedResultStruct *)jarg1; 
  result = (IKEnrollIdentMode) ((arg1)->_enrollIdentMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIdentProcessedResultStruct__irisIdentResult_set(void * jarg1, void * jarg2) {
  IKIdentProcessedResultStruct *arg1 = (IKIdentProcessedResultStruct *) 0 ;
  IKIrisIdentProcessedResultStruct *arg2 = (IKIrisIdentProcessedResultStruct *) 0 ;
  
  arg1 = (IKIdentProcessedResultStruct *)jarg1; 
  arg2 = (IKIrisIdentProcessedResultStruct *)jarg2; 
  if (arg1) (arg1)->_irisIdentResult = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKIdentProcessedResultStruct__irisIdentResult_get(void * jarg1) {
  void * jresult ;
  IKIdentProcessedResultStruct *arg1 = (IKIdentProcessedResultStruct *) 0 ;
  IKIrisIdentProcessedResultStruct *result = 0 ;
  
  arg1 = (IKIdentProcessedResultStruct *)jarg1; 
  result = (IKIrisIdentProcessedResultStruct *)& ((arg1)->_irisIdentResult);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKIdentProcessedResultStruct__faceIdentResult_set(void * jarg1, void * jarg2) {
  IKIdentProcessedResultStruct *arg1 = (IKIdentProcessedResultStruct *) 0 ;
  IKFaceIdentOutputStruct *arg2 = (IKFaceIdentOutputStruct *) 0 ;
  
  arg1 = (IKIdentProcessedResultStruct *)jarg1; 
  arg2 = (IKFaceIdentOutputStruct *)jarg2; 
  if (arg1) (arg1)->_faceIdentResult = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKIdentProcessedResultStruct__faceIdentResult_get(void * jarg1) {
  void * jresult ;
  IKIdentProcessedResultStruct *arg1 = (IKIdentProcessedResultStruct *) 0 ;
  IKFaceIdentOutputStruct *result = 0 ;
  
  arg1 = (IKIdentProcessedResultStruct *)jarg1; 
  result = (IKFaceIdentOutputStruct *)& ((arg1)->_faceIdentResult);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IKIdentProcessedResultStruct() {
  void * jresult ;
  IKIdentProcessedResultStruct *result = 0 ;
  
  result = (IKIdentProcessedResultStruct *)new IKIdentProcessedResultStruct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKIdentProcessedResultStruct(void * jarg1) {
  IKIdentProcessedResultStruct *arg1 = (IKIdentProcessedResultStruct *) 0 ;
  
  arg1 = (IKIdentProcessedResultStruct *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKProcessorState_mode_set(void * jarg1, int jarg2) {
  IKProcessorState *arg1 = (IKProcessorState *) 0 ;
  IKEnrollIdentMode arg2 ;
  
  arg1 = (IKProcessorState *)jarg1; 
  arg2 = (IKEnrollIdentMode)jarg2; 
  if (arg1) (arg1)->mode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKProcessorState_mode_get(void * jarg1) {
  int jresult ;
  IKProcessorState *arg1 = (IKProcessorState *) 0 ;
  IKEnrollIdentMode result;
  
  arg1 = (IKProcessorState *)jarg1; 
  result = (IKEnrollIdentMode) ((arg1)->mode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKProcessorState_dataValidFlag_set(void * jarg1, int jarg2) {
  IKProcessorState *arg1 = (IKProcessorState *) 0 ;
  IKIrisAndFaceDataValidFlag arg2 ;
  
  arg1 = (IKProcessorState *)jarg1; 
  arg2 = (IKIrisAndFaceDataValidFlag)jarg2; 
  if (arg1) (arg1)->dataValidFlag = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKProcessorState_dataValidFlag_get(void * jarg1) {
  int jresult ;
  IKProcessorState *arg1 = (IKProcessorState *) 0 ;
  IKIrisAndFaceDataValidFlag result;
  
  arg1 = (IKProcessorState *)jarg1; 
  result = (IKIrisAndFaceDataValidFlag) ((arg1)->dataValidFlag);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKProcessorState_pIrisState_set(void * jarg1, void * jarg2) {
  IKProcessorState *arg1 = (IKProcessorState *) 0 ;
  IKIrisProcessorState *arg2 = (IKIrisProcessorState *) 0 ;
  
  arg1 = (IKProcessorState *)jarg1; 
  arg2 = (IKIrisProcessorState *)jarg2; 
  if (arg1) (arg1)->pIrisState = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKProcessorState_pIrisState_get(void * jarg1) {
  void * jresult ;
  IKProcessorState *arg1 = (IKProcessorState *) 0 ;
  IKIrisProcessorState *result = 0 ;
  
  arg1 = (IKProcessorState *)jarg1; 
  result = (IKIrisProcessorState *) ((arg1)->pIrisState);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKProcessorState_pFaceState_set(void * jarg1, void * jarg2) {
  IKProcessorState *arg1 = (IKProcessorState *) 0 ;
  IKFaceProcessorState *arg2 = (IKFaceProcessorState *) 0 ;
  
  arg1 = (IKProcessorState *)jarg1; 
  arg2 = (IKFaceProcessorState *)jarg2; 
  if (arg1) (arg1)->pFaceState = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKProcessorState_pFaceState_get(void * jarg1) {
  void * jresult ;
  IKProcessorState *arg1 = (IKProcessorState *) 0 ;
  IKFaceProcessorState *result = 0 ;
  
  arg1 = (IKProcessorState *)jarg1; 
  result = (IKFaceProcessorState *) ((arg1)->pFaceState);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IKProcessorState() {
  void * jresult ;
  IKProcessorState *result = 0 ;
  
  result = (IKProcessorState *)new IKProcessorState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKProcessorState(void * jarg1) {
  IKProcessorState *arg1 = (IKProcessorState *) 0 ;
  
  arg1 = (IKProcessorState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKDebugInfo_dataValidFlag_set(void * jarg1, int jarg2) {
  IKDebugInfo *arg1 = (IKDebugInfo *) 0 ;
  IKIrisAndFaceDataValidFlag arg2 ;
  
  arg1 = (IKDebugInfo *)jarg1; 
  arg2 = (IKIrisAndFaceDataValidFlag)jarg2; 
  if (arg1) (arg1)->dataValidFlag = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKDebugInfo_dataValidFlag_get(void * jarg1) {
  int jresult ;
  IKDebugInfo *arg1 = (IKDebugInfo *) 0 ;
  IKIrisAndFaceDataValidFlag result;
  
  arg1 = (IKDebugInfo *)jarg1; 
  result = (IKIrisAndFaceDataValidFlag) ((arg1)->dataValidFlag);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKDebugInfo_irisDebugInfo_set(void * jarg1, void * jarg2) {
  IKDebugInfo *arg1 = (IKDebugInfo *) 0 ;
  IKIrisDebugInfo *arg2 = (IKIrisDebugInfo *) 0 ;
  
  arg1 = (IKDebugInfo *)jarg1; 
  arg2 = (IKIrisDebugInfo *)jarg2; 
  if (arg1) (arg1)->irisDebugInfo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKDebugInfo_irisDebugInfo_get(void * jarg1) {
  void * jresult ;
  IKDebugInfo *arg1 = (IKDebugInfo *) 0 ;
  IKIrisDebugInfo *result = 0 ;
  
  arg1 = (IKDebugInfo *)jarg1; 
  result = (IKIrisDebugInfo *) ((arg1)->irisDebugInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKDebugInfo_faceDebugInfo_set(void * jarg1, void * jarg2) {
  IKDebugInfo *arg1 = (IKDebugInfo *) 0 ;
  IKFaceDebugInfo *arg2 = (IKFaceDebugInfo *) 0 ;
  
  arg1 = (IKDebugInfo *)jarg1; 
  arg2 = (IKFaceDebugInfo *)jarg2; 
  if (arg1) (arg1)->faceDebugInfo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKDebugInfo_faceDebugInfo_get(void * jarg1) {
  void * jresult ;
  IKDebugInfo *arg1 = (IKDebugInfo *) 0 ;
  IKFaceDebugInfo *result = 0 ;
  
  arg1 = (IKDebugInfo *)jarg1; 
  result = (IKFaceDebugInfo *) ((arg1)->faceDebugInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IKDebugInfo() {
  void * jresult ;
  IKDebugInfo *result = 0 ;
  
  result = (IKDebugInfo *)new IKDebugInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKDebugInfo(void * jarg1) {
  IKDebugInfo *arg1 = (IKDebugInfo *) 0 ;
  
  arg1 = (IKDebugInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKBaseProcessorCallback(void * jarg1) {
  IKBaseProcessorCallback *arg1 = (IKBaseProcessorCallback *) 0 ;
  
  arg1 = (IKBaseProcessorCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKBaseProcessorCallback_handleInitCompleted(void * jarg1, int jarg2) {
  IKBaseProcessorCallback *arg1 = (IKBaseProcessorCallback *) 0 ;
  int arg2 ;
  
  arg1 = (IKBaseProcessorCallback *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->handleInitCompleted(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKBaseProcessorCallback_handleProcessCompleted(void * jarg1, void * jarg2) {
  IKBaseProcessorCallback *arg1 = (IKBaseProcessorCallback *) 0 ;
  IKBaseEnrollProcessedResult *arg2 = 0 ;
  
  arg1 = (IKBaseProcessorCallback *)jarg1; 
  arg2 = (IKBaseEnrollProcessedResult *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IKBaseEnrollProcessedResult & is null", 0);
    return ;
  } 
  (arg1)->handleProcessCompleted(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKBaseProcessorCallback_handleIdentProcessCompleted(void * jarg1, void * jarg2) {
  IKBaseProcessorCallback *arg1 = (IKBaseProcessorCallback *) 0 ;
  IKIdentProcessedResultStruct *arg2 = 0 ;
  
  arg1 = (IKBaseProcessorCallback *)jarg1; 
  arg2 = (IKIdentProcessedResultStruct *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IKIdentProcessedResultStruct const & is null", 0);
    return ;
  } 
  (arg1)->handleIdentProcessCompleted((IKIdentProcessedResultStruct const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKBaseProcessorCallback_handleStateUpdated(void * jarg1, void * jarg2) {
  IKBaseProcessorCallback *arg1 = (IKBaseProcessorCallback *) 0 ;
  IKProcessorState *arg2 = 0 ;
  
  arg1 = (IKBaseProcessorCallback *)jarg1; 
  arg2 = (IKProcessorState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IKProcessorState const & is null", 0);
    return ;
  } 
  (arg1)->handleStateUpdated((IKProcessorState const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKBaseProcessorCallback_handleDebugInfoUpdated(void * jarg1, void * jarg2) {
  IKBaseProcessorCallback *arg1 = (IKBaseProcessorCallback *) 0 ;
  IKDebugInfo *arg2 = 0 ;
  
  arg1 = (IKBaseProcessorCallback *)jarg1; 
  arg2 = (IKDebugInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IKDebugInfo const & is null", 0);
    return ;
  } 
  (arg1)->handleDebugInfoUpdated((IKDebugInfo const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKBaseProcessorCallback_handleCameraUpdated(void * jarg1, void * jarg2) {
  IKBaseProcessorCallback *arg1 = (IKBaseProcessorCallback *) 0 ;
  IKCameraUpdated *arg2 = 0 ;
  
  arg1 = (IKBaseProcessorCallback *)jarg1; 
  arg2 = (IKCameraUpdated *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IKCameraUpdated const & is null", 0);
    return ;
  } 
  (arg1)->handleCameraUpdated((IKCameraUpdated const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKBaseProcessorCallback_handleLog(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  IKBaseProcessorCallback *arg1 = (IKBaseProcessorCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  IKLog arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (IKBaseProcessorCallback *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (IKLog)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->handleLog((char const *)arg2,arg3,(char const *)arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_E_CAMERA_OK_get() {
  int jresult ;
  int result;
  
  result = (int)(int)E_CAMERA_OK;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_E_CAMERA_BASE_ERROR_get() {
  int jresult ;
  int result;
  
  result = (int)(int)E_CAMERA_BASE_ERROR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_E_CAMERA_INVALID_OPERATE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)E_CAMERA_INVALID_OPERATE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_E_CAMERA_INVALID_INPUT_get() {
  int jresult ;
  int result;
  
  result = (int)(int)E_CAMERA_INVALID_INPUT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_E_CAMERA_INVALID_DEVICETYPE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)E_CAMERA_INVALID_DEVICETYPE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_E_CAMERA_INIT_FAILED_get() {
  int jresult ;
  int result;
  
  result = (int)(int)E_CAMERA_INIT_FAILED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_E_CAMERA_DEVICE_NOTFOUND_get() {
  int jresult ;
  int result;
  
  result = (int)(int)E_CAMERA_DEVICE_NOTFOUND;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_E_CAMERA_OPEN_FAILED_get() {
  int jresult ;
  int result;
  
  result = (int)(int)E_CAMERA_OPEN_FAILED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_E_CAMERA_INVALID_FORMAT_SETTING_get() {
  int jresult ;
  int result;
  
  result = (int)(int)E_CAMERA_INVALID_FORMAT_SETTING;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_E_CAMERA_WAITCB_TIMEOUT_get() {
  int jresult ;
  int result;
  
  result = (int)(int)E_CAMERA_WAITCB_TIMEOUT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_E_CAMERA_NOT_SUPPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(int)E_CAMERA_NOT_SUPPORT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_E_CAMERA_INTERFACE_FAILED_get() {
  int jresult ;
  int result;
  
  result = (int)(int)E_CAMERA_INTERFACE_FAILED;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_E_CAMERA_DEVICE_HAS_OPEND_get() {
  int jresult ;
  int result;
  
  result = (int)(int)E_CAMERA_DEVICE_HAS_OPEND;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_E_CAMERA_DEVICE_CTRLCOM_ERROR_get() {
  int jresult ;
  int result;
  
  result = (int)(int)E_CAMERA_DEVICE_CTRLCOM_ERROR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_E_CAMERA_READ_DEVICE_PROP_get() {
  int jresult ;
  int result;
  
  result = (int)(int)E_CAMERA_READ_DEVICE_PROP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_E_CAMERA_WRITE_DEVICE_PROP_get() {
  int jresult ;
  int result;
  
  result = (int)(int)E_CAMERA_WRITE_DEVICE_PROP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_E_CAMERA_LIB_NOT_FOUND_get() {
  int jresult ;
  int result;
  
  result = (int)(int)E_CAMERA_LIB_NOT_FOUND;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DNSMPRATE_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CBDEFAULTVALUE_get() {
  int jresult ;
  int result;
  
  result = (int)(9999);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IKFrame__SWIG_0() {
  void * jresult ;
  IKFrame *result = 0 ;
  
  result = (IKFrame *)new IKFrame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IKFrame__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  IKFrameFormat arg4 ;
  IKFrameType arg5 ;
  IKFrame *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (IKFrameFormat)jarg4; 
  arg5 = (IKFrameType)jarg5; 
  result = (IKFrame *)new IKFrame(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IKFrame__SWIG_2(void * jarg1) {
  void * jresult ;
  IKFrame *arg1 = 0 ;
  IKFrame *result = 0 ;
  
  arg1 = (IKFrame *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IKFrame const & is null", 0);
    return 0;
  } 
  result = (IKFrame *)new IKFrame((IKFrame const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKFrame(void * jarg1) {
  IKFrame *arg1 = (IKFrame *) 0 ;
  
  arg1 = (IKFrame *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKFrame_eq(void * jarg1, void * jarg2) {
  void * jresult ;
  IKFrame *arg1 = (IKFrame *) 0 ;
  IKFrame *arg2 = 0 ;
  IKFrame *result = 0 ;
  
  arg1 = (IKFrame *)jarg1; 
  arg2 = (IKFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IKFrame const & is null", 0);
    return 0;
  } 
  result = (IKFrame *) &(arg1)->operator =((IKFrame const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKFrame_simpleCpy(void * jarg1, void * jarg2) {
  void * jresult ;
  IKFrame *arg1 = (IKFrame *) 0 ;
  IKFrame *arg2 = 0 ;
  IKFrame *result = 0 ;
  
  arg1 = (IKFrame *)jarg1; 
  arg2 = (IKFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IKFrame const & is null", 0);
    return 0;
  } 
  result = (IKFrame *) &(arg1)->simpleCpy((IKFrame const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IKFrame_empty(void * jarg1) {
  unsigned int jresult ;
  IKFrame *arg1 = (IKFrame *) 0 ;
  bool result;
  
  arg1 = (IKFrame *)jarg1; 
  result = (bool)((IKFrame const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IKFrame_clear(void * jarg1) {
  unsigned int jresult ;
  IKFrame *arg1 = (IKFrame *) 0 ;
  bool result;
  
  arg1 = (IKFrame *)jarg1; 
  result = (bool)(arg1)->clear();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFrame_image_data_set(void * jarg1, void * jarg2) {
  IKFrame *arg1 = (IKFrame *) 0 ;
  std::shared_ptr< unsigned char > arg2 ;
  std::shared_ptr< unsigned char > *argp2 ;
  
  arg1 = (IKFrame *)jarg1; 
  argp2 = (std::shared_ptr< unsigned char > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::shared_ptr< unsigned char >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->image_data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKFrame_image_data_get(void * jarg1) {
  void * jresult ;
  IKFrame *arg1 = (IKFrame *) 0 ;
  std::shared_ptr< unsigned char > result;
  
  arg1 = (IKFrame *)jarg1; 
  result =  ((arg1)->image_data);
  jresult = new std::shared_ptr< unsigned char >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFrame_data_len_set(void * jarg1, long jarg2) {
  IKFrame *arg1 = (IKFrame *) 0 ;
  long arg2 ;
  
  arg1 = (IKFrame *)jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->data_len = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_IKFrame_data_len_get(void * jarg1) {
  long jresult ;
  IKFrame *arg1 = (IKFrame *) 0 ;
  long result;
  
  arg1 = (IKFrame *)jarg1; 
  result = (long) ((arg1)->data_len);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFrame_width_set(void * jarg1, int jarg2) {
  IKFrame *arg1 = (IKFrame *) 0 ;
  int arg2 ;
  
  arg1 = (IKFrame *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFrame_width_get(void * jarg1) {
  int jresult ;
  IKFrame *arg1 = (IKFrame *) 0 ;
  int result;
  
  arg1 = (IKFrame *)jarg1; 
  result = (int) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFrame_height_set(void * jarg1, int jarg2) {
  IKFrame *arg1 = (IKFrame *) 0 ;
  int arg2 ;
  
  arg1 = (IKFrame *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFrame_height_get(void * jarg1) {
  int jresult ;
  IKFrame *arg1 = (IKFrame *) 0 ;
  int result;
  
  arg1 = (IKFrame *)jarg1; 
  result = (int) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFrame_rotation_set(void * jarg1, int jarg2) {
  IKFrame *arg1 = (IKFrame *) 0 ;
  int arg2 ;
  
  arg1 = (IKFrame *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->rotation = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFrame_rotation_get(void * jarg1) {
  int jresult ;
  IKFrame *arg1 = (IKFrame *) 0 ;
  int result;
  
  arg1 = (IKFrame *)jarg1; 
  result = (int) ((arg1)->rotation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFrame_format_set(void * jarg1, int jarg2) {
  IKFrame *arg1 = (IKFrame *) 0 ;
  IKFrameFormat arg2 ;
  
  arg1 = (IKFrame *)jarg1; 
  arg2 = (IKFrameFormat)jarg2; 
  if (arg1) (arg1)->format = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFrame_format_get(void * jarg1) {
  int jresult ;
  IKFrame *arg1 = (IKFrame *) 0 ;
  IKFrameFormat result;
  
  arg1 = (IKFrame *)jarg1; 
  result = (IKFrameFormat) ((arg1)->format);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKFrame_frame_type_set(void * jarg1, int jarg2) {
  IKFrame *arg1 = (IKFrame *) 0 ;
  IKFrameType arg2 ;
  
  arg1 = (IKFrame *)jarg1; 
  arg2 = (IKFrameType)jarg2; 
  if (arg1) (arg1)->frame_type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKFrame_frame_type_get(void * jarg1) {
  int jresult ;
  IKFrame *arg1 = (IKFrame *) 0 ;
  IKFrameType result;
  
  arg1 = (IKFrame *)jarg1; 
  result = (IKFrameType) ((arg1)->frame_type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKCameraUpdated_frame_set(void * jarg1, void * jarg2) {
  IKCameraUpdated *arg1 = (IKCameraUpdated *) 0 ;
  IKFrame *arg2 = (IKFrame *) 0 ;
  
  arg1 = (IKCameraUpdated *)jarg1; 
  arg2 = (IKFrame *)jarg2; 
  if (arg1) (arg1)->frame = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKCameraUpdated_frame_get(void * jarg1) {
  void * jresult ;
  IKCameraUpdated *arg1 = (IKCameraUpdated *) 0 ;
  IKFrame *result = 0 ;
  
  arg1 = (IKCameraUpdated *)jarg1; 
  result = (IKFrame *) ((arg1)->frame);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKCameraUpdated_mirrorFlag_set(void * jarg1, unsigned int jarg2) {
  IKCameraUpdated *arg1 = (IKCameraUpdated *) 0 ;
  bool arg2 ;
  
  arg1 = (IKCameraUpdated *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mirrorFlag = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IKCameraUpdated_mirrorFlag_get(void * jarg1) {
  unsigned int jresult ;
  IKCameraUpdated *arg1 = (IKCameraUpdated *) 0 ;
  bool result;
  
  arg1 = (IKCameraUpdated *)jarg1; 
  result = (bool) ((arg1)->mirrorFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKCameraUpdated__event_set(void * jarg1, int jarg2) {
  IKCameraUpdated *arg1 = (IKCameraUpdated *) 0 ;
  IKCameraEvent arg2 ;
  
  arg1 = (IKCameraUpdated *)jarg1; 
  arg2 = (IKCameraEvent)jarg2; 
  if (arg1) (arg1)->_event = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKCameraUpdated__event_get(void * jarg1) {
  int jresult ;
  IKCameraUpdated *arg1 = (IKCameraUpdated *) 0 ;
  IKCameraEvent result;
  
  arg1 = (IKCameraUpdated *)jarg1; 
  result = (IKCameraEvent) ((arg1)->_event);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKCameraUpdated_deviceType_set(void * jarg1, int jarg2) {
  IKCameraUpdated *arg1 = (IKCameraUpdated *) 0 ;
  int arg2 ;
  
  arg1 = (IKCameraUpdated *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->deviceType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKCameraUpdated_deviceType_get(void * jarg1) {
  int jresult ;
  IKCameraUpdated *arg1 = (IKCameraUpdated *) 0 ;
  int result;
  
  arg1 = (IKCameraUpdated *)jarg1; 
  result = (int) ((arg1)->deviceType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKCameraUpdated_lightMode_set(void * jarg1, int jarg2) {
  IKCameraUpdated *arg1 = (IKCameraUpdated *) 0 ;
  IKLIGHTMODE arg2 ;
  
  arg1 = (IKCameraUpdated *)jarg1; 
  arg2 = (IKLIGHTMODE)jarg2; 
  if (arg1) (arg1)->lightMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKCameraUpdated_lightMode_get(void * jarg1) {
  int jresult ;
  IKCameraUpdated *arg1 = (IKCameraUpdated *) 0 ;
  IKLIGHTMODE result;
  
  arg1 = (IKCameraUpdated *)jarg1; 
  result = (IKLIGHTMODE) ((arg1)->lightMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKCameraUpdated_deviceSN_set(void * jarg1, char * jarg2) {
  IKCameraUpdated *arg1 = (IKCameraUpdated *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (IKCameraUpdated *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->deviceSN;
    if (arg2) {
      arg1->deviceSN = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->deviceSN, (const char *)arg2);
    } else {
      arg1->deviceSN = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IKCameraUpdated_deviceSN_get(void * jarg1) {
  char * jresult ;
  IKCameraUpdated *arg1 = (IKCameraUpdated *) 0 ;
  char *result = 0 ;
  
  arg1 = (IKCameraUpdated *)jarg1; 
  result = (char *) ((arg1)->deviceSN);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKCameraUpdated_deviceSNLen_set(void * jarg1, int jarg2) {
  IKCameraUpdated *arg1 = (IKCameraUpdated *) 0 ;
  int arg2 ;
  
  arg1 = (IKCameraUpdated *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->deviceSNLen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKCameraUpdated_deviceSNLen_get(void * jarg1) {
  int jresult ;
  IKCameraUpdated *arg1 = (IKCameraUpdated *) 0 ;
  int result;
  
  arg1 = (IKCameraUpdated *)jarg1; 
  result = (int) ((arg1)->deviceSNLen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKCameraUpdated_deviceTypeString_set(void * jarg1, char * jarg2) {
  IKCameraUpdated *arg1 = (IKCameraUpdated *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (IKCameraUpdated *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->deviceTypeString;
    if (arg2) {
      arg1->deviceTypeString = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->deviceTypeString, (const char *)arg2);
    } else {
      arg1->deviceTypeString = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IKCameraUpdated_deviceTypeString_get(void * jarg1) {
  char * jresult ;
  IKCameraUpdated *arg1 = (IKCameraUpdated *) 0 ;
  char *result = 0 ;
  
  arg1 = (IKCameraUpdated *)jarg1; 
  result = (char *) ((arg1)->deviceTypeString);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKCameraUpdated_deviceTypeStringLen_set(void * jarg1, int jarg2) {
  IKCameraUpdated *arg1 = (IKCameraUpdated *) 0 ;
  int arg2 ;
  
  arg1 = (IKCameraUpdated *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->deviceTypeStringLen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKCameraUpdated_deviceTypeStringLen_get(void * jarg1) {
  int jresult ;
  IKCameraUpdated *arg1 = (IKCameraUpdated *) 0 ;
  int result;
  
  arg1 = (IKCameraUpdated *)jarg1; 
  result = (int) ((arg1)->deviceTypeStringLen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IKCameraUpdated() {
  void * jresult ;
  IKCameraUpdated *result = 0 ;
  
  result = (IKCameraUpdated *)new IKCameraUpdated();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKCameraUpdated(void * jarg1) {
  IKCameraUpdated *arg1 = (IKCameraUpdated *) 0 ;
  
  arg1 = (IKCameraUpdated *)jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

