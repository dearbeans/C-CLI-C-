//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IKIrisInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IKIrisInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IKIrisInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IKIrisInfo obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IKIrisInfo() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          dllmainPINVOKE.delete_IKIrisInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public void creat() {
    dllmainPINVOKE.IKIrisInfo_creat(swigCPtr);
  }

  public void distroy() {
    dllmainPINVOKE.IKIrisInfo_distroy(swigCPtr);
  }

  public void Init() {
    dllmainPINVOKE.IKIrisInfo_Init(swigCPtr);
  }

  public int ImgHeight {
    set {
      dllmainPINVOKE.IKIrisInfo_ImgHeight_set(swigCPtr, value);
    } 
    get {
      int ret = dllmainPINVOKE.IKIrisInfo_ImgHeight_get(swigCPtr);
      return ret;
    } 
  }

  public int ImgWidth {
    set {
      dllmainPINVOKE.IKIrisInfo_ImgWidth_set(swigCPtr, value);
    } 
    get {
      int ret = dllmainPINVOKE.IKIrisInfo_ImgWidth_get(swigCPtr);
      return ret;
    } 
  }

  public int ImgType {
    set {
      dllmainPINVOKE.IKIrisInfo_ImgType_set(swigCPtr, value);
    } 
    get {
      int ret = dllmainPINVOKE.IKIrisInfo_ImgType_get(swigCPtr);
      return ret;
    } 
  }

  public int IrisRow {
    set {
      dllmainPINVOKE.IKIrisInfo_IrisRow_set(swigCPtr, value);
    } 
    get {
      int ret = dllmainPINVOKE.IKIrisInfo_IrisRow_get(swigCPtr);
      return ret;
    } 
  }

  public int IrisCol {
    set {
      dllmainPINVOKE.IKIrisInfo_IrisCol_set(swigCPtr, value);
    } 
    get {
      int ret = dllmainPINVOKE.IKIrisInfo_IrisCol_get(swigCPtr);
      return ret;
    } 
  }

  public int IrisRadius {
    set {
      dllmainPINVOKE.IKIrisInfo_IrisRadius_set(swigCPtr, value);
    } 
    get {
      int ret = dllmainPINVOKE.IKIrisInfo_IrisRadius_get(swigCPtr);
      return ret;
    } 
  }

  public int FocusScore {
    set {
      dllmainPINVOKE.IKIrisInfo_FocusScore_set(swigCPtr, value);
    } 
    get {
      int ret = dllmainPINVOKE.IKIrisInfo_FocusScore_get(swigCPtr);
      return ret;
    } 
  }

  public int PercentVisible {
    set {
      dllmainPINVOKE.IKIrisInfo_PercentVisible_set(swigCPtr, value);
    } 
    get {
      int ret = dllmainPINVOKE.IKIrisInfo_PercentVisible_get(swigCPtr);
      return ret;
    } 
  }

  public int Brightness {
    set {
      dllmainPINVOKE.IKIrisInfo_Brightness_set(swigCPtr, value);
    } 
    get {
      int ret = dllmainPINVOKE.IKIrisInfo_Brightness_get(swigCPtr);
      return ret;
    } 
  }

  public int MotionBlur {
    set {
      dllmainPINVOKE.IKIrisInfo_MotionBlur_set(swigCPtr, value);
    } 
    get {
      int ret = dllmainPINVOKE.IKIrisInfo_MotionBlur_get(swigCPtr);
      return ret;
    } 
  }

  public int QualityScore {
    set {
      dllmainPINVOKE.IKIrisInfo_QualityScore_set(swigCPtr, value);
    } 
    get {
      int ret = dllmainPINVOKE.IKIrisInfo_QualityScore_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_char imgData {
    set {
      dllmainPINVOKE.IKIrisInfo_imgData_set(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = dllmainPINVOKE.IKIrisInfo_imgData_get(swigCPtr);
      SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
      return ret;
    } 
  }

  public int imgDataLen {
    set {
      dllmainPINVOKE.IKIrisInfo_imgDataLen_set(swigCPtr, value);
    } 
    get {
      int ret = dllmainPINVOKE.IKIrisInfo_imgDataLen_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_char imgDataMat {
    set {
      dllmainPINVOKE.IKIrisInfo_imgDataMat_set(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = dllmainPINVOKE.IKIrisInfo_imgDataMat_get(swigCPtr);
      SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
      return ret;
    } 
  }

  public int imgDataMatLen {
    set {
      dllmainPINVOKE.IKIrisInfo_imgDataMatLen_set(swigCPtr, value);
    } 
    get {
      int ret = dllmainPINVOKE.IKIrisInfo_imgDataMatLen_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_char irisEnrTemplate {
    set {
      dllmainPINVOKE.IKIrisInfo_irisEnrTemplate_set(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = dllmainPINVOKE.IKIrisInfo_irisEnrTemplate_get(swigCPtr);
      SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
      return ret;
    } 
  }

  public int irisEnrTemplateLen {
    set {
      dllmainPINVOKE.IKIrisInfo_irisEnrTemplateLen_set(swigCPtr, value);
    } 
    get {
      int ret = dllmainPINVOKE.IKIrisInfo_irisEnrTemplateLen_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_char irisRecTemplate {
    set {
      dllmainPINVOKE.IKIrisInfo_irisRecTemplate_set(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = dllmainPINVOKE.IKIrisInfo_irisRecTemplate_get(swigCPtr);
      SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
      return ret;
    } 
  }

  public int irisRecTemplateLen {
    set {
      dllmainPINVOKE.IKIrisInfo_irisRecTemplateLen_set(swigCPtr, value);
    } 
    get {
      int ret = dllmainPINVOKE.IKIrisInfo_irisRecTemplateLen_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int irisInfoUnkonwn {
    set {
      dllmainPINVOKE.IKIrisInfo_irisInfoUnkonwn_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = dllmainPINVOKE.IKIrisInfo_irisInfoUnkonwn_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public int irisInfoUnkonwnLen {
    set {
      dllmainPINVOKE.IKIrisInfo_irisInfoUnkonwnLen_set(swigCPtr, value);
    } 
    get {
      int ret = dllmainPINVOKE.IKIrisInfo_irisInfoUnkonwnLen_get(swigCPtr);
      return ret;
    } 
  }

  public IKIrisInfo() : this(dllmainPINVOKE.new_IKIrisInfo(), true) {
  }

}
