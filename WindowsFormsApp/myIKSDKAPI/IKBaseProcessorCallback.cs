//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IKBaseProcessorCallback : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IKBaseProcessorCallback(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IKBaseProcessorCallback obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IKBaseProcessorCallback obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IKBaseProcessorCallback() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          dllmainPINVOKE.delete_IKBaseProcessorCallback(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual void handleInitCompleted(int initRes) {
    dllmainPINVOKE.IKBaseProcessorCallback_handleInitCompleted(swigCPtr, initRes);
  }

  public virtual void handleProcessCompleted(IKBaseEnrollProcessedResult result) {
    dllmainPINVOKE.IKBaseProcessorCallback_handleProcessCompleted(swigCPtr, IKBaseEnrollProcessedResult.getCPtr(result));
    if (dllmainPINVOKE.SWIGPendingException.Pending) throw dllmainPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void handleIdentProcessCompleted(IKIdentProcessedResultStruct result) {
    dllmainPINVOKE.IKBaseProcessorCallback_handleIdentProcessCompleted(swigCPtr, IKIdentProcessedResultStruct.getCPtr(result));
    if (dllmainPINVOKE.SWIGPendingException.Pending) throw dllmainPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void handleStateUpdated(IKProcessorState state) {
    dllmainPINVOKE.IKBaseProcessorCallback_handleStateUpdated(swigCPtr, IKProcessorState.getCPtr(state));
    if (dllmainPINVOKE.SWIGPendingException.Pending) throw dllmainPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void handleDebugInfoUpdated(IKDebugInfo debugInfo) {
    dllmainPINVOKE.IKBaseProcessorCallback_handleDebugInfoUpdated(swigCPtr, IKDebugInfo.getCPtr(debugInfo));
    if (dllmainPINVOKE.SWIGPendingException.Pending) throw dllmainPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void handleCameraUpdated(IKCameraUpdated cameraUpdate) {
    dllmainPINVOKE.IKBaseProcessorCallback_handleCameraUpdated(swigCPtr, IKCameraUpdated.getCPtr(cameraUpdate));
    if (dllmainPINVOKE.SWIGPendingException.Pending) throw dllmainPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void handleLog(string logType, IKLog logLevel, string logInfo) {
    dllmainPINVOKE.IKBaseProcessorCallback_handleLog(swigCPtr, logType, (int)logLevel, logInfo);
  }

}
