//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IKFaceProcessedResult : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IKFaceProcessedResult(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IKFaceProcessedResult obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IKFaceProcessedResult obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IKFaceProcessedResult() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          dllmainPINVOKE.delete_IKFaceProcessedResult(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public void creat(int enrTemplateSize, int recTemplateSize, int bioImageH, int bioImageW, int bioImageSize, int detectImageH, int detectImageW, int detectImageSize) {
    dllmainPINVOKE.IKFaceProcessedResult_creat(swigCPtr, enrTemplateSize, recTemplateSize, bioImageH, bioImageW, bioImageSize, detectImageH, detectImageW, detectImageSize);
  }

  public void init() {
    dllmainPINVOKE.IKFaceProcessedResult_init(swigCPtr);
  }

  public void distroy() {
    dllmainPINVOKE.IKFaceProcessedResult_distroy(swigCPtr);
  }

  public SELFRECT m_rcFace {
    set {
      dllmainPINVOKE.IKFaceProcessedResult_m_rcFace_set(swigCPtr, SELFRECT.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = dllmainPINVOKE.IKFaceProcessedResult_m_rcFace_get(swigCPtr);
      SELFRECT ret = (cPtr == global::System.IntPtr.Zero) ? null : new SELFRECT(cPtr, false);
      return ret;
    } 
  }

  public IKFaceQulityInfo m_faceQuality {
    set {
      dllmainPINVOKE.IKFaceProcessedResult_m_faceQuality_set(swigCPtr, IKFaceQulityInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = dllmainPINVOKE.IKFaceProcessedResult_m_faceQuality_get(swigCPtr);
      IKFaceQulityInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new IKFaceQulityInfo(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_char m_detectImageData {
    set {
      dllmainPINVOKE.IKFaceProcessedResult_m_detectImageData_set(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = dllmainPINVOKE.IKFaceProcessedResult_m_detectImageData_get(swigCPtr);
      SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
      return ret;
    } 
  }

  public int m_detectImageSize {
    set {
      dllmainPINVOKE.IKFaceProcessedResult_m_detectImageSize_set(swigCPtr, value);
    } 
    get {
      int ret = dllmainPINVOKE.IKFaceProcessedResult_m_detectImageSize_get(swigCPtr);
      return ret;
    } 
  }

  public int m_detectImageH {
    set {
      dllmainPINVOKE.IKFaceProcessedResult_m_detectImageH_set(swigCPtr, value);
    } 
    get {
      int ret = dllmainPINVOKE.IKFaceProcessedResult_m_detectImageH_get(swigCPtr);
      return ret;
    } 
  }

  public int m_detectImageW {
    set {
      dllmainPINVOKE.IKFaceProcessedResult_m_detectImageW_set(swigCPtr, value);
    } 
    get {
      int ret = dllmainPINVOKE.IKFaceProcessedResult_m_detectImageW_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_char m_imageData {
    set {
      dllmainPINVOKE.IKFaceProcessedResult_m_imageData_set(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = dllmainPINVOKE.IKFaceProcessedResult_m_imageData_get(swigCPtr);
      SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
      return ret;
    } 
  }

  public int m_imageSize {
    set {
      dllmainPINVOKE.IKFaceProcessedResult_m_imageSize_set(swigCPtr, value);
    } 
    get {
      int ret = dllmainPINVOKE.IKFaceProcessedResult_m_imageSize_get(swigCPtr);
      return ret;
    } 
  }

  public int m_imageH {
    set {
      dllmainPINVOKE.IKFaceProcessedResult_m_imageH_set(swigCPtr, value);
    } 
    get {
      int ret = dllmainPINVOKE.IKFaceProcessedResult_m_imageH_get(swigCPtr);
      return ret;
    } 
  }

  public int m_imageW {
    set {
      dllmainPINVOKE.IKFaceProcessedResult_m_imageW_set(swigCPtr, value);
    } 
    get {
      int ret = dllmainPINVOKE.IKFaceProcessedResult_m_imageW_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_char m_enrTemplate {
    set {
      dllmainPINVOKE.IKFaceProcessedResult_m_enrTemplate_set(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = dllmainPINVOKE.IKFaceProcessedResult_m_enrTemplate_get(swigCPtr);
      SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
      return ret;
    } 
  }

  public int m_enrTemplateSize {
    set {
      dllmainPINVOKE.IKFaceProcessedResult_m_enrTemplateSize_set(swigCPtr, value);
    } 
    get {
      int ret = dllmainPINVOKE.IKFaceProcessedResult_m_enrTemplateSize_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_char m_recTemplate {
    set {
      dllmainPINVOKE.IKFaceProcessedResult_m_recTemplate_set(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = dllmainPINVOKE.IKFaceProcessedResult_m_recTemplate_get(swigCPtr);
      SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
      return ret;
    } 
  }

  public int m_recTemplateSize {
    set {
      dllmainPINVOKE.IKFaceProcessedResult_m_recTemplateSize_set(swigCPtr, value);
    } 
    get {
      int ret = dllmainPINVOKE.IKFaceProcessedResult_m_recTemplateSize_get(swigCPtr);
      return ret;
    } 
  }

  public IKFaceProcessedResult() : this(dllmainPINVOKE.new_IKFaceProcessedResult(), true) {
  }

}
